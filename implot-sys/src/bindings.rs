/* automatically generated by rust-bindgen 0.69.4 */

pub use imgui_sys::*;
pub type time_t = libc::time_t;
pub type tm = libc::tm;

#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_const_charPtr {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ImVector_const_charPtr() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_const_charPtr> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_const_charPtr>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_const_charPtr))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_const_charPtr>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_const_charPtr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_const_charPtr),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_const_charPtr),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_const_charPtr),
            "::",
            stringify!(Data)
        )
    );
}
pub type ImS8 = ::std::os::raw::c_schar;
pub type ImU8 = ::std::os::raw::c_uchar;
pub type ImS16 = ::std::os::raw::c_short;
pub type ImU16 = ::std::os::raw::c_ushort;
pub type ImS32 = ::std::os::raw::c_int;
pub type ImU32 = ::std::os::raw::c_uint;
pub type ImS64 = ::std::os::raw::c_longlong;
pub type ImU64 = ::std::os::raw::c_ulonglong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImWchar {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImWchar,
}
#[test]
fn bindgen_test_layout_ImVector_ImWchar() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImWchar> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImWchar>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImWchar))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImWchar>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImWchar))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImWchar),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImWchar),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImWchar),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiTextRange {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiTextRange,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiTextRange() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiTextRange> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiTextRange>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiTextRange))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiTextRange>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiTextRange))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTextRange),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTextRange),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTextRange),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_char {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_ImVector_char() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_char> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_char>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_char))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_char>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_char))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_char),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_char),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_char),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiStoragePair {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiStoragePair,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiStoragePair() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiStoragePair> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiStoragePair>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiStoragePair))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiStoragePair>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiStoragePair))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiStoragePair),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiStoragePair),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiStoragePair),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImDrawCmd {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImDrawCmd,
}
#[test]
fn bindgen_test_layout_ImVector_ImDrawCmd() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImDrawCmd> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImDrawCmd>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImDrawCmd))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImDrawCmd>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImDrawCmd))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawCmd),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawCmd),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawCmd),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImDrawIdx {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImDrawIdx,
}
#[test]
fn bindgen_test_layout_ImVector_ImDrawIdx() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImDrawIdx> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImDrawIdx>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImDrawIdx))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImDrawIdx>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImDrawIdx))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawIdx),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawIdx),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawIdx),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImDrawChannel {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImDrawChannel,
}
#[test]
fn bindgen_test_layout_ImVector_ImDrawChannel() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImDrawChannel> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImDrawChannel>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImDrawChannel))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImDrawChannel>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImDrawChannel))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawChannel),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawChannel),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawChannel),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImDrawVert {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImDrawVert,
}
#[test]
fn bindgen_test_layout_ImVector_ImDrawVert() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImDrawVert> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImDrawVert>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImDrawVert))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImDrawVert>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImDrawVert))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawVert),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawVert),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawVert),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImVec4 {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImVec4,
}
#[test]
fn bindgen_test_layout_ImVector_ImVec4() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImVec4> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImVec4>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImVec4))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImVec4>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImVec4))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImVec4),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImVec4),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImVec4),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImTextureID {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImTextureID,
}
#[test]
fn bindgen_test_layout_ImVector_ImTextureID() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImTextureID> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImTextureID>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImTextureID))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImTextureID>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImTextureID))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImTextureID),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImTextureID),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImTextureID),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImVec2 {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImVec2,
}
#[test]
fn bindgen_test_layout_ImVector_ImVec2() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImVec2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImVec2>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImVec2))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImVec2>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImVec2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImVec2),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImVec2),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImVec2),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImU32 {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImU32,
}
#[test]
fn bindgen_test_layout_ImVector_ImU32() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImU32> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImU32>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImU32))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImU32>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImU32))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImU32),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImU32),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImU32),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImFontPtr {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut *mut ImFont,
}
#[test]
fn bindgen_test_layout_ImVector_ImFontPtr() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImFontPtr> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImFontPtr>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImFontPtr))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImFontPtr>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImFontPtr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontPtr),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontPtr),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontPtr),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImFontAtlasCustomRect {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImFontAtlasCustomRect,
}
#[test]
fn bindgen_test_layout_ImVector_ImFontAtlasCustomRect() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImFontAtlasCustomRect> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImFontAtlasCustomRect>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImFontAtlasCustomRect))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImFontAtlasCustomRect>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImFontAtlasCustomRect))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontAtlasCustomRect),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontAtlasCustomRect),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontAtlasCustomRect),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImFontConfig {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImFontConfig,
}
#[test]
fn bindgen_test_layout_ImVector_ImFontConfig() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImFontConfig> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImFontConfig>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImFontConfig))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImFontConfig>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImFontConfig))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontConfig),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontConfig),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontConfig),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_float {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut f32,
}
#[test]
fn bindgen_test_layout_ImVector_float() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_float> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_float>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_float))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_float>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_float))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_float),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_float),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_float),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImFontGlyph {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImFontGlyph,
}
#[test]
fn bindgen_test_layout_ImVector_ImFontGlyph() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImFontGlyph> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImFontGlyph>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImFontGlyph))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImFontGlyph>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImFontGlyph))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontGlyph),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontGlyph),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImFontGlyph),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiPlatformMonitor {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiPlatformMonitor,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiPlatformMonitor() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiPlatformMonitor> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiPlatformMonitor>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiPlatformMonitor))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiPlatformMonitor>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiPlatformMonitor))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiPlatformMonitor),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiPlatformMonitor),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiPlatformMonitor),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiViewportPtr {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut *mut ImGuiViewport,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiViewportPtr() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiViewportPtr> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiViewportPtr>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiViewportPtr))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiViewportPtr>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiViewportPtr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiViewportPtr),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiViewportPtr),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiViewportPtr),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_int {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ImVector_int() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_int> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_int>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_int))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_int>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_int))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_int),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_int),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_int),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImDrawListPtr {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut *mut ImDrawList,
}
#[test]
fn bindgen_test_layout_ImVector_ImDrawListPtr() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImDrawListPtr> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImDrawListPtr>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImDrawListPtr))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImDrawListPtr>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImDrawListPtr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawListPtr),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawListPtr),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImDrawListPtr),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiKeyRoutingData {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiKeyRoutingData,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiKeyRoutingData() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiKeyRoutingData> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiKeyRoutingData>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiKeyRoutingData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiKeyRoutingData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiKeyRoutingData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiKeyRoutingData),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiKeyRoutingData),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiKeyRoutingData),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiListClipperRange {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiListClipperRange,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiListClipperRange() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiListClipperRange> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiListClipperRange>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiListClipperRange))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiListClipperRange>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiListClipperRange))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiListClipperRange),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiListClipperRange),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiListClipperRange),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiOldColumnData {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiOldColumnData,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiOldColumnData() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiOldColumnData> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiOldColumnData>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiOldColumnData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiOldColumnData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiOldColumnData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiOldColumnData),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiOldColumnData),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiOldColumnData),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiWindowPtr {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut *mut ImGuiWindow,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiWindowPtr() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiWindowPtr> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiWindowPtr>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiWindowPtr))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiWindowPtr>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiWindowPtr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiWindowPtr),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiWindowPtr),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiWindowPtr),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiDockRequest {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiDockRequest,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiDockRequest() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiDockRequest> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiDockRequest>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiDockRequest))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiDockRequest>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiDockRequest))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiDockRequest),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiDockRequest),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiDockRequest),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiDockNodeSettings {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiDockNodeSettings,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiDockNodeSettings() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiDockNodeSettings> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiDockNodeSettings>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiDockNodeSettings))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiDockNodeSettings>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiDockNodeSettings))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiDockNodeSettings),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiDockNodeSettings),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiDockNodeSettings),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiStackLevelInfo {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiStackLevelInfo,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiStackLevelInfo() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiStackLevelInfo> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiStackLevelInfo>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiStackLevelInfo))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiStackLevelInfo>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiStackLevelInfo))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiStackLevelInfo),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiStackLevelInfo),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiStackLevelInfo),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiInputEvent {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiInputEvent,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiInputEvent() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiInputEvent> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiInputEvent>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiInputEvent))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiInputEvent>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiInputEvent))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiInputEvent),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiInputEvent),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiInputEvent),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiWindowStackData {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiWindowStackData,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiWindowStackData() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiWindowStackData> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiWindowStackData>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiWindowStackData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiWindowStackData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiWindowStackData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiWindowStackData),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiWindowStackData),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiWindowStackData),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiColorMod {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiColorMod,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiColorMod() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiColorMod> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiColorMod>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiColorMod))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiColorMod>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiColorMod))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiColorMod),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiColorMod),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiColorMod),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiStyleMod {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiStyleMod,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiStyleMod() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiStyleMod> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiStyleMod>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiStyleMod))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiStyleMod>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiStyleMod))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiStyleMod),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiStyleMod),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiStyleMod),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiID {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiID,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiID() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiID> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiID>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiID))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiID>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiID))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiID),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiID),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiID),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiItemFlags {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiItemFlags,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiItemFlags() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiItemFlags> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiItemFlags>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiItemFlags))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiItemFlags>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiItemFlags))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiItemFlags),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiItemFlags),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiItemFlags),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiGroupData {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiGroupData,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiGroupData() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiGroupData> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiGroupData>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiGroupData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiGroupData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiGroupData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiGroupData),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiGroupData),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiGroupData),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiPopupData {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiPopupData,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiPopupData() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiPopupData> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiPopupData>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiPopupData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiPopupData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiPopupData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiPopupData),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiPopupData),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiPopupData),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiViewportPPtr {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut *mut ImGuiViewportP,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiViewportPPtr() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiViewportPPtr> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiViewportPPtr>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiViewportPPtr))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiViewportPPtr>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiViewportPPtr))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiViewportPPtr),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiViewportPPtr),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiViewportPPtr),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_unsigned_char {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ::std::os::raw::c_uchar,
}
#[test]
fn bindgen_test_layout_ImVector_unsigned_char() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_unsigned_char> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_unsigned_char>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_unsigned_char))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_unsigned_char>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_unsigned_char))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_unsigned_char),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_unsigned_char),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_unsigned_char),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiListClipperData {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiListClipperData,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiListClipperData() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiListClipperData> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiListClipperData>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiListClipperData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiListClipperData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiListClipperData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiListClipperData),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiListClipperData),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiListClipperData),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiTableTempData {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiTableTempData,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiTableTempData() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiTableTempData> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiTableTempData>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiTableTempData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiTableTempData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiTableTempData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTableTempData),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTableTempData),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTableTempData),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiTable {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiTable,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiTable() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiTable> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiTable>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiTable))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiTable>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiTable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTable),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTable),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTable),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
pub struct ImPool_ImGuiTable {
    pub Buf: ImVector_ImGuiTable,
    pub Map: ImGuiStorage,
    pub FreeIdx: ImPoolIdx,
    pub AliveCount: ImPoolIdx,
}
#[test]
fn bindgen_test_layout_ImPool_ImGuiTable() {
    const UNINIT: ::std::mem::MaybeUninit<ImPool_ImGuiTable> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImPool_ImGuiTable>(),
        40usize,
        concat!("Size of: ", stringify!(ImPool_ImGuiTable))
    );
    assert_eq!(
        ::std::mem::align_of::<ImPool_ImGuiTable>(),
        8usize,
        concat!("Alignment of ", stringify!(ImPool_ImGuiTable))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Buf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPool_ImGuiTable),
            "::",
            stringify!(Buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Map) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPool_ImGuiTable),
            "::",
            stringify!(Map)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FreeIdx) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPool_ImGuiTable),
            "::",
            stringify!(FreeIdx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AliveCount) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPool_ImGuiTable),
            "::",
            stringify!(AliveCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiTabBar {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiTabBar,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiTabBar() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiTabBar> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiTabBar>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiTabBar))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiTabBar>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiTabBar))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTabBar),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTabBar),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTabBar),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
pub struct ImPool_ImGuiTabBar {
    pub Buf: ImVector_ImGuiTabBar,
    pub Map: ImGuiStorage,
    pub FreeIdx: ImPoolIdx,
    pub AliveCount: ImPoolIdx,
}
#[test]
fn bindgen_test_layout_ImPool_ImGuiTabBar() {
    const UNINIT: ::std::mem::MaybeUninit<ImPool_ImGuiTabBar> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImPool_ImGuiTabBar>(),
        40usize,
        concat!("Size of: ", stringify!(ImPool_ImGuiTabBar))
    );
    assert_eq!(
        ::std::mem::align_of::<ImPool_ImGuiTabBar>(),
        8usize,
        concat!("Alignment of ", stringify!(ImPool_ImGuiTabBar))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Buf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPool_ImGuiTabBar),
            "::",
            stringify!(Buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Map) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPool_ImGuiTabBar),
            "::",
            stringify!(Map)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FreeIdx) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPool_ImGuiTabBar),
            "::",
            stringify!(FreeIdx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AliveCount) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPool_ImGuiTabBar),
            "::",
            stringify!(AliveCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiPtrOrIndex {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiPtrOrIndex,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiPtrOrIndex() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiPtrOrIndex> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiPtrOrIndex>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiPtrOrIndex))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiPtrOrIndex>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiPtrOrIndex))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiPtrOrIndex),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiPtrOrIndex),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiPtrOrIndex),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiShrinkWidthItem {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiShrinkWidthItem,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiShrinkWidthItem() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiShrinkWidthItem> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiShrinkWidthItem>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiShrinkWidthItem))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiShrinkWidthItem>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiShrinkWidthItem))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiShrinkWidthItem),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiShrinkWidthItem),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiShrinkWidthItem),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiSettingsHandler {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiSettingsHandler,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiSettingsHandler() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiSettingsHandler> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiSettingsHandler>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiSettingsHandler))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiSettingsHandler>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiSettingsHandler))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiSettingsHandler),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiSettingsHandler),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiSettingsHandler),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiContextHook {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiContextHook,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiContextHook() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiContextHook> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiContextHook>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiContextHook))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiContextHook>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiContextHook))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiContextHook),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiContextHook),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiContextHook),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiOldColumns {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiOldColumns,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiOldColumns() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiOldColumns> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiOldColumns>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiOldColumns))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiOldColumns>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiOldColumns))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiOldColumns),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiOldColumns),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiOldColumns),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiTabItem {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiTabItem,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiTabItem() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiTabItem> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiTabItem>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiTabItem))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiTabItem>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiTabItem))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTabItem),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTabItem),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTabItem),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiTableInstanceData {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiTableInstanceData,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiTableInstanceData() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiTableInstanceData> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiTableInstanceData>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiTableInstanceData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiTableInstanceData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImGuiTableInstanceData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTableInstanceData),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTableInstanceData),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTableInstanceData),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImGuiTableColumnSortSpecs {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImGuiTableColumnSortSpecs,
}
#[test]
fn bindgen_test_layout_ImVector_ImGuiTableColumnSortSpecs() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImGuiTableColumnSortSpecs> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImGuiTableColumnSortSpecs>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImGuiTableColumnSortSpecs))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImGuiTableColumnSortSpecs>(),
        8usize,
        concat!(
            "Alignment of ",
            stringify!(ImVector_ImGuiTableColumnSortSpecs)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTableColumnSortSpecs),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTableColumnSortSpecs),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImGuiTableColumnSortSpecs),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImPlotAxisColor {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImS16 {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImS16,
}
#[test]
fn bindgen_test_layout_ImVector_ImS16() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImS16> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImS16>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImS16))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImS16>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImS16))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImS16),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImS16),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImS16),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImS32 {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImS32,
}
#[test]
fn bindgen_test_layout_ImVector_ImS32() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImS32> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImS32>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImS32))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImS32>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImS32))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImS32),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImS32),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImS32),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImS64 {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImS64,
}
#[test]
fn bindgen_test_layout_ImVector_ImS64() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImS64> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImS64>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImS64))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImS64>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImS64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImS64),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImS64),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImS64),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImS8 {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImS8,
}
#[test]
fn bindgen_test_layout_ImVector_ImS8() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImS8> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImS8>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImS8))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImS8>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImS8))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImS8),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImS8),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImS8),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImU16 {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImU16,
}
#[test]
fn bindgen_test_layout_ImVector_ImU16() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImU16> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImU16>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImU16))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImU16>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImU16))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImU16),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImU16),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImU16),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImU64 {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImU64,
}
#[test]
fn bindgen_test_layout_ImVector_ImU64() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImU64> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImU64>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImU64))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImU64>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImU64))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImU64),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImU64),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImU64),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImU8 {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImU8,
}
#[test]
fn bindgen_test_layout_ImVector_ImU8() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImU8> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImU8>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImU8))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImU8>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImU8))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImU8),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImU8),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImU8),
            "::",
            stringify!(Data)
        )
    );
}
pub type ImAxis = ::std::os::raw::c_int;
pub type ImPlotFlags = ::std::os::raw::c_int;
pub type ImPlotAxisFlags = ::std::os::raw::c_int;
pub type ImPlotSubplotFlags = ::std::os::raw::c_int;
pub type ImPlotLegendFlags = ::std::os::raw::c_int;
pub type ImPlotMouseTextFlags = ::std::os::raw::c_int;
pub type ImPlotDragToolFlags = ::std::os::raw::c_int;
pub type ImPlotColormapScaleFlags = ::std::os::raw::c_int;
pub type ImPlotItemFlags = ::std::os::raw::c_int;
pub type ImPlotLineFlags = ::std::os::raw::c_int;
pub type ImPlotScatterFlags = ::std::os::raw::c_int;
pub type ImPlotStairsFlags = ::std::os::raw::c_int;
pub type ImPlotShadedFlags = ::std::os::raw::c_int;
pub type ImPlotBarsFlags = ::std::os::raw::c_int;
pub type ImPlotBarGroupsFlags = ::std::os::raw::c_int;
pub type ImPlotErrorBarsFlags = ::std::os::raw::c_int;
pub type ImPlotStemsFlags = ::std::os::raw::c_int;
pub type ImPlotInfLinesFlags = ::std::os::raw::c_int;
pub type ImPlotPieChartFlags = ::std::os::raw::c_int;
pub type ImPlotHeatmapFlags = ::std::os::raw::c_int;
pub type ImPlotHistogramFlags = ::std::os::raw::c_int;
pub type ImPlotDigitalFlags = ::std::os::raw::c_int;
pub type ImPlotImageFlags = ::std::os::raw::c_int;
pub type ImPlotTextFlags = ::std::os::raw::c_int;
pub type ImPlotDummyFlags = ::std::os::raw::c_int;
pub type ImPlotCond = ::std::os::raw::c_int;
pub type ImPlotCol = ::std::os::raw::c_int;
pub type ImPlotStyleVar = ::std::os::raw::c_int;
pub type ImPlotScale = ::std::os::raw::c_int;
pub type ImPlotMarker = ::std::os::raw::c_int;
pub type ImPlotColormap = ::std::os::raw::c_int;
pub type ImPlotLocation = ::std::os::raw::c_int;
pub type ImPlotBin = ::std::os::raw::c_int;
pub const ImAxis__ImAxis_X1: ImAxis_ = 0;
pub const ImAxis__ImAxis_X2: ImAxis_ = 1;
pub const ImAxis__ImAxis_X3: ImAxis_ = 2;
pub const ImAxis__ImAxis_Y1: ImAxis_ = 3;
pub const ImAxis__ImAxis_Y2: ImAxis_ = 4;
pub const ImAxis__ImAxis_Y3: ImAxis_ = 5;
pub const ImAxis__ImAxis_COUNT: ImAxis_ = 6;
pub type ImAxis_ = ::std::os::raw::c_uint;
pub const ImPlotFlags__ImPlotFlags_None: ImPlotFlags_ = 0;
pub const ImPlotFlags__ImPlotFlags_NoTitle: ImPlotFlags_ = 1;
pub const ImPlotFlags__ImPlotFlags_NoLegend: ImPlotFlags_ = 2;
pub const ImPlotFlags__ImPlotFlags_NoMouseText: ImPlotFlags_ = 4;
pub const ImPlotFlags__ImPlotFlags_NoInputs: ImPlotFlags_ = 8;
pub const ImPlotFlags__ImPlotFlags_NoMenus: ImPlotFlags_ = 16;
pub const ImPlotFlags__ImPlotFlags_NoBoxSelect: ImPlotFlags_ = 32;
pub const ImPlotFlags__ImPlotFlags_NoFrame: ImPlotFlags_ = 64;
pub const ImPlotFlags__ImPlotFlags_Equal: ImPlotFlags_ = 128;
pub const ImPlotFlags__ImPlotFlags_Crosshairs: ImPlotFlags_ = 256;
pub const ImPlotFlags__ImPlotFlags_CanvasOnly: ImPlotFlags_ = 55;
pub type ImPlotFlags_ = ::std::os::raw::c_uint;
pub const ImPlotAxisFlags__ImPlotAxisFlags_None: ImPlotAxisFlags_ = 0;
pub const ImPlotAxisFlags__ImPlotAxisFlags_NoLabel: ImPlotAxisFlags_ = 1;
pub const ImPlotAxisFlags__ImPlotAxisFlags_NoGridLines: ImPlotAxisFlags_ = 2;
pub const ImPlotAxisFlags__ImPlotAxisFlags_NoTickMarks: ImPlotAxisFlags_ = 4;
pub const ImPlotAxisFlags__ImPlotAxisFlags_NoTickLabels: ImPlotAxisFlags_ = 8;
pub const ImPlotAxisFlags__ImPlotAxisFlags_NoInitialFit: ImPlotAxisFlags_ = 16;
pub const ImPlotAxisFlags__ImPlotAxisFlags_NoMenus: ImPlotAxisFlags_ = 32;
pub const ImPlotAxisFlags__ImPlotAxisFlags_NoSideSwitch: ImPlotAxisFlags_ = 64;
pub const ImPlotAxisFlags__ImPlotAxisFlags_NoHighlight: ImPlotAxisFlags_ = 128;
pub const ImPlotAxisFlags__ImPlotAxisFlags_Opposite: ImPlotAxisFlags_ = 256;
pub const ImPlotAxisFlags__ImPlotAxisFlags_Foreground: ImPlotAxisFlags_ = 512;
pub const ImPlotAxisFlags__ImPlotAxisFlags_Invert: ImPlotAxisFlags_ = 1024;
pub const ImPlotAxisFlags__ImPlotAxisFlags_AutoFit: ImPlotAxisFlags_ = 2048;
pub const ImPlotAxisFlags__ImPlotAxisFlags_RangeFit: ImPlotAxisFlags_ = 4096;
pub const ImPlotAxisFlags__ImPlotAxisFlags_PanStretch: ImPlotAxisFlags_ = 8192;
pub const ImPlotAxisFlags__ImPlotAxisFlags_LockMin: ImPlotAxisFlags_ = 16384;
pub const ImPlotAxisFlags__ImPlotAxisFlags_LockMax: ImPlotAxisFlags_ = 32768;
pub const ImPlotAxisFlags__ImPlotAxisFlags_Lock: ImPlotAxisFlags_ = 49152;
pub const ImPlotAxisFlags__ImPlotAxisFlags_NoDecorations: ImPlotAxisFlags_ = 15;
pub const ImPlotAxisFlags__ImPlotAxisFlags_AuxDefault: ImPlotAxisFlags_ = 258;
pub type ImPlotAxisFlags_ = ::std::os::raw::c_uint;
pub const ImPlotSubplotFlags__ImPlotSubplotFlags_None: ImPlotSubplotFlags_ = 0;
pub const ImPlotSubplotFlags__ImPlotSubplotFlags_NoTitle: ImPlotSubplotFlags_ = 1;
pub const ImPlotSubplotFlags__ImPlotSubplotFlags_NoLegend: ImPlotSubplotFlags_ = 2;
pub const ImPlotSubplotFlags__ImPlotSubplotFlags_NoMenus: ImPlotSubplotFlags_ = 4;
pub const ImPlotSubplotFlags__ImPlotSubplotFlags_NoResize: ImPlotSubplotFlags_ = 8;
pub const ImPlotSubplotFlags__ImPlotSubplotFlags_NoAlign: ImPlotSubplotFlags_ = 16;
pub const ImPlotSubplotFlags__ImPlotSubplotFlags_ShareItems: ImPlotSubplotFlags_ = 32;
pub const ImPlotSubplotFlags__ImPlotSubplotFlags_LinkRows: ImPlotSubplotFlags_ = 64;
pub const ImPlotSubplotFlags__ImPlotSubplotFlags_LinkCols: ImPlotSubplotFlags_ = 128;
pub const ImPlotSubplotFlags__ImPlotSubplotFlags_LinkAllX: ImPlotSubplotFlags_ = 256;
pub const ImPlotSubplotFlags__ImPlotSubplotFlags_LinkAllY: ImPlotSubplotFlags_ = 512;
pub const ImPlotSubplotFlags__ImPlotSubplotFlags_ColMajor: ImPlotSubplotFlags_ = 1024;
pub type ImPlotSubplotFlags_ = ::std::os::raw::c_uint;
pub const ImPlotLegendFlags__ImPlotLegendFlags_None: ImPlotLegendFlags_ = 0;
pub const ImPlotLegendFlags__ImPlotLegendFlags_NoButtons: ImPlotLegendFlags_ = 1;
pub const ImPlotLegendFlags__ImPlotLegendFlags_NoHighlightItem: ImPlotLegendFlags_ = 2;
pub const ImPlotLegendFlags__ImPlotLegendFlags_NoHighlightAxis: ImPlotLegendFlags_ = 4;
pub const ImPlotLegendFlags__ImPlotLegendFlags_NoMenus: ImPlotLegendFlags_ = 8;
pub const ImPlotLegendFlags__ImPlotLegendFlags_Outside: ImPlotLegendFlags_ = 16;
pub const ImPlotLegendFlags__ImPlotLegendFlags_Horizontal: ImPlotLegendFlags_ = 32;
pub const ImPlotLegendFlags__ImPlotLegendFlags_Sort: ImPlotLegendFlags_ = 64;
pub type ImPlotLegendFlags_ = ::std::os::raw::c_uint;
pub const ImPlotMouseTextFlags__ImPlotMouseTextFlags_None: ImPlotMouseTextFlags_ = 0;
pub const ImPlotMouseTextFlags__ImPlotMouseTextFlags_NoAuxAxes: ImPlotMouseTextFlags_ = 1;
pub const ImPlotMouseTextFlags__ImPlotMouseTextFlags_NoFormat: ImPlotMouseTextFlags_ = 2;
pub const ImPlotMouseTextFlags__ImPlotMouseTextFlags_ShowAlways: ImPlotMouseTextFlags_ = 4;
pub type ImPlotMouseTextFlags_ = ::std::os::raw::c_uint;
pub const ImPlotDragToolFlags__ImPlotDragToolFlags_None: ImPlotDragToolFlags_ = 0;
pub const ImPlotDragToolFlags__ImPlotDragToolFlags_NoCursors: ImPlotDragToolFlags_ = 1;
pub const ImPlotDragToolFlags__ImPlotDragToolFlags_NoFit: ImPlotDragToolFlags_ = 2;
pub const ImPlotDragToolFlags__ImPlotDragToolFlags_NoInputs: ImPlotDragToolFlags_ = 4;
pub const ImPlotDragToolFlags__ImPlotDragToolFlags_Delayed: ImPlotDragToolFlags_ = 8;
pub type ImPlotDragToolFlags_ = ::std::os::raw::c_uint;
pub const ImPlotColormapScaleFlags__ImPlotColormapScaleFlags_None: ImPlotColormapScaleFlags_ = 0;
pub const ImPlotColormapScaleFlags__ImPlotColormapScaleFlags_NoLabel: ImPlotColormapScaleFlags_ = 1;
pub const ImPlotColormapScaleFlags__ImPlotColormapScaleFlags_Opposite: ImPlotColormapScaleFlags_ =
    2;
pub const ImPlotColormapScaleFlags__ImPlotColormapScaleFlags_Invert: ImPlotColormapScaleFlags_ = 4;
pub type ImPlotColormapScaleFlags_ = ::std::os::raw::c_uint;
pub const ImPlotItemFlags__ImPlotItemFlags_None: ImPlotItemFlags_ = 0;
pub const ImPlotItemFlags__ImPlotItemFlags_NoLegend: ImPlotItemFlags_ = 1;
pub const ImPlotItemFlags__ImPlotItemFlags_NoFit: ImPlotItemFlags_ = 2;
pub type ImPlotItemFlags_ = ::std::os::raw::c_uint;
pub const ImPlotLineFlags__ImPlotLineFlags_None: ImPlotLineFlags_ = 0;
pub const ImPlotLineFlags__ImPlotLineFlags_Segments: ImPlotLineFlags_ = 1024;
pub const ImPlotLineFlags__ImPlotLineFlags_Loop: ImPlotLineFlags_ = 2048;
pub const ImPlotLineFlags__ImPlotLineFlags_SkipNaN: ImPlotLineFlags_ = 4096;
pub const ImPlotLineFlags__ImPlotLineFlags_NoClip: ImPlotLineFlags_ = 8192;
pub const ImPlotLineFlags__ImPlotLineFlags_Shaded: ImPlotLineFlags_ = 16384;
pub type ImPlotLineFlags_ = ::std::os::raw::c_uint;
pub const ImPlotScatterFlags__ImPlotScatterFlags_None: ImPlotScatterFlags_ = 0;
pub const ImPlotScatterFlags__ImPlotScatterFlags_NoClip: ImPlotScatterFlags_ = 1024;
pub type ImPlotScatterFlags_ = ::std::os::raw::c_uint;
pub const ImPlotStairsFlags__ImPlotStairsFlags_None: ImPlotStairsFlags_ = 0;
pub const ImPlotStairsFlags__ImPlotStairsFlags_PreStep: ImPlotStairsFlags_ = 1024;
pub const ImPlotStairsFlags__ImPlotStairsFlags_Shaded: ImPlotStairsFlags_ = 2048;
pub type ImPlotStairsFlags_ = ::std::os::raw::c_uint;
pub const ImPlotShadedFlags__ImPlotShadedFlags_None: ImPlotShadedFlags_ = 0;
pub type ImPlotShadedFlags_ = ::std::os::raw::c_uint;
pub const ImPlotBarsFlags__ImPlotBarsFlags_None: ImPlotBarsFlags_ = 0;
pub const ImPlotBarsFlags__ImPlotBarsFlags_Horizontal: ImPlotBarsFlags_ = 1024;
pub type ImPlotBarsFlags_ = ::std::os::raw::c_uint;
pub const ImPlotBarGroupsFlags__ImPlotBarGroupsFlags_None: ImPlotBarGroupsFlags_ = 0;
pub const ImPlotBarGroupsFlags__ImPlotBarGroupsFlags_Horizontal: ImPlotBarGroupsFlags_ = 1024;
pub const ImPlotBarGroupsFlags__ImPlotBarGroupsFlags_Stacked: ImPlotBarGroupsFlags_ = 2048;
pub type ImPlotBarGroupsFlags_ = ::std::os::raw::c_uint;
pub const ImPlotErrorBarsFlags__ImPlotErrorBarsFlags_None: ImPlotErrorBarsFlags_ = 0;
pub const ImPlotErrorBarsFlags__ImPlotErrorBarsFlags_Horizontal: ImPlotErrorBarsFlags_ = 1024;
pub type ImPlotErrorBarsFlags_ = ::std::os::raw::c_uint;
pub const ImPlotStemsFlags__ImPlotStemsFlags_None: ImPlotStemsFlags_ = 0;
pub const ImPlotStemsFlags__ImPlotStemsFlags_Horizontal: ImPlotStemsFlags_ = 1024;
pub type ImPlotStemsFlags_ = ::std::os::raw::c_uint;
pub const ImPlotInfLinesFlags__ImPlotInfLinesFlags_None: ImPlotInfLinesFlags_ = 0;
pub const ImPlotInfLinesFlags__ImPlotInfLinesFlags_Horizontal: ImPlotInfLinesFlags_ = 1024;
pub type ImPlotInfLinesFlags_ = ::std::os::raw::c_uint;
pub const ImPlotPieChartFlags__ImPlotPieChartFlags_None: ImPlotPieChartFlags_ = 0;
pub const ImPlotPieChartFlags__ImPlotPieChartFlags_Normalize: ImPlotPieChartFlags_ = 1024;
pub const ImPlotPieChartFlags__ImPlotPieChartFlags_IgnoreHidden: ImPlotPieChartFlags_ = 2048;
pub type ImPlotPieChartFlags_ = ::std::os::raw::c_uint;
pub const ImPlotHeatmapFlags__ImPlotHeatmapFlags_None: ImPlotHeatmapFlags_ = 0;
pub const ImPlotHeatmapFlags__ImPlotHeatmapFlags_ColMajor: ImPlotHeatmapFlags_ = 1024;
pub type ImPlotHeatmapFlags_ = ::std::os::raw::c_uint;
pub const ImPlotHistogramFlags__ImPlotHistogramFlags_None: ImPlotHistogramFlags_ = 0;
pub const ImPlotHistogramFlags__ImPlotHistogramFlags_Horizontal: ImPlotHistogramFlags_ = 1024;
pub const ImPlotHistogramFlags__ImPlotHistogramFlags_Cumulative: ImPlotHistogramFlags_ = 2048;
pub const ImPlotHistogramFlags__ImPlotHistogramFlags_Density: ImPlotHistogramFlags_ = 4096;
pub const ImPlotHistogramFlags__ImPlotHistogramFlags_NoOutliers: ImPlotHistogramFlags_ = 8192;
pub const ImPlotHistogramFlags__ImPlotHistogramFlags_ColMajor: ImPlotHistogramFlags_ = 16384;
pub type ImPlotHistogramFlags_ = ::std::os::raw::c_uint;
pub const ImPlotDigitalFlags__ImPlotDigitalFlags_None: ImPlotDigitalFlags_ = 0;
pub type ImPlotDigitalFlags_ = ::std::os::raw::c_uint;
pub const ImPlotImageFlags__ImPlotImageFlags_None: ImPlotImageFlags_ = 0;
pub type ImPlotImageFlags_ = ::std::os::raw::c_uint;
pub const ImPlotTextFlags__ImPlotTextFlags_None: ImPlotTextFlags_ = 0;
pub const ImPlotTextFlags__ImPlotTextFlags_Vertical: ImPlotTextFlags_ = 1024;
pub type ImPlotTextFlags_ = ::std::os::raw::c_uint;
pub const ImPlotDummyFlags__ImPlotDummyFlags_None: ImPlotDummyFlags_ = 0;
pub type ImPlotDummyFlags_ = ::std::os::raw::c_uint;
pub const ImPlotCond__ImPlotCond_None: ImPlotCond_ = 0;
pub const ImPlotCond__ImPlotCond_Always: ImPlotCond_ = 1;
pub const ImPlotCond__ImPlotCond_Once: ImPlotCond_ = 2;
pub type ImPlotCond_ = ::std::os::raw::c_uint;
pub const ImPlotCol__ImPlotCol_Line: ImPlotCol_ = 0;
pub const ImPlotCol__ImPlotCol_Fill: ImPlotCol_ = 1;
pub const ImPlotCol__ImPlotCol_MarkerOutline: ImPlotCol_ = 2;
pub const ImPlotCol__ImPlotCol_MarkerFill: ImPlotCol_ = 3;
pub const ImPlotCol__ImPlotCol_ErrorBar: ImPlotCol_ = 4;
pub const ImPlotCol__ImPlotCol_FrameBg: ImPlotCol_ = 5;
pub const ImPlotCol__ImPlotCol_PlotBg: ImPlotCol_ = 6;
pub const ImPlotCol__ImPlotCol_PlotBorder: ImPlotCol_ = 7;
pub const ImPlotCol__ImPlotCol_LegendBg: ImPlotCol_ = 8;
pub const ImPlotCol__ImPlotCol_LegendBorder: ImPlotCol_ = 9;
pub const ImPlotCol__ImPlotCol_LegendText: ImPlotCol_ = 10;
pub const ImPlotCol__ImPlotCol_TitleText: ImPlotCol_ = 11;
pub const ImPlotCol__ImPlotCol_InlayText: ImPlotCol_ = 12;
pub const ImPlotCol__ImPlotCol_AxisText: ImPlotCol_ = 13;
pub const ImPlotCol__ImPlotCol_AxisGrid: ImPlotCol_ = 14;
pub const ImPlotCol__ImPlotCol_AxisTick: ImPlotCol_ = 15;
pub const ImPlotCol__ImPlotCol_AxisBg: ImPlotCol_ = 16;
pub const ImPlotCol__ImPlotCol_AxisBgHovered: ImPlotCol_ = 17;
pub const ImPlotCol__ImPlotCol_AxisBgActive: ImPlotCol_ = 18;
pub const ImPlotCol__ImPlotCol_Selection: ImPlotCol_ = 19;
pub const ImPlotCol__ImPlotCol_Crosshairs: ImPlotCol_ = 20;
pub const ImPlotCol__ImPlotCol_COUNT: ImPlotCol_ = 21;
pub type ImPlotCol_ = ::std::os::raw::c_uint;
pub const ImPlotStyleVar__ImPlotStyleVar_LineWeight: ImPlotStyleVar_ = 0;
pub const ImPlotStyleVar__ImPlotStyleVar_Marker: ImPlotStyleVar_ = 1;
pub const ImPlotStyleVar__ImPlotStyleVar_MarkerSize: ImPlotStyleVar_ = 2;
pub const ImPlotStyleVar__ImPlotStyleVar_MarkerWeight: ImPlotStyleVar_ = 3;
pub const ImPlotStyleVar__ImPlotStyleVar_FillAlpha: ImPlotStyleVar_ = 4;
pub const ImPlotStyleVar__ImPlotStyleVar_ErrorBarSize: ImPlotStyleVar_ = 5;
pub const ImPlotStyleVar__ImPlotStyleVar_ErrorBarWeight: ImPlotStyleVar_ = 6;
pub const ImPlotStyleVar__ImPlotStyleVar_DigitalBitHeight: ImPlotStyleVar_ = 7;
pub const ImPlotStyleVar__ImPlotStyleVar_DigitalBitGap: ImPlotStyleVar_ = 8;
pub const ImPlotStyleVar__ImPlotStyleVar_PlotBorderSize: ImPlotStyleVar_ = 9;
pub const ImPlotStyleVar__ImPlotStyleVar_MinorAlpha: ImPlotStyleVar_ = 10;
pub const ImPlotStyleVar__ImPlotStyleVar_MajorTickLen: ImPlotStyleVar_ = 11;
pub const ImPlotStyleVar__ImPlotStyleVar_MinorTickLen: ImPlotStyleVar_ = 12;
pub const ImPlotStyleVar__ImPlotStyleVar_MajorTickSize: ImPlotStyleVar_ = 13;
pub const ImPlotStyleVar__ImPlotStyleVar_MinorTickSize: ImPlotStyleVar_ = 14;
pub const ImPlotStyleVar__ImPlotStyleVar_MajorGridSize: ImPlotStyleVar_ = 15;
pub const ImPlotStyleVar__ImPlotStyleVar_MinorGridSize: ImPlotStyleVar_ = 16;
pub const ImPlotStyleVar__ImPlotStyleVar_PlotPadding: ImPlotStyleVar_ = 17;
pub const ImPlotStyleVar__ImPlotStyleVar_LabelPadding: ImPlotStyleVar_ = 18;
pub const ImPlotStyleVar__ImPlotStyleVar_LegendPadding: ImPlotStyleVar_ = 19;
pub const ImPlotStyleVar__ImPlotStyleVar_LegendInnerPadding: ImPlotStyleVar_ = 20;
pub const ImPlotStyleVar__ImPlotStyleVar_LegendSpacing: ImPlotStyleVar_ = 21;
pub const ImPlotStyleVar__ImPlotStyleVar_MousePosPadding: ImPlotStyleVar_ = 22;
pub const ImPlotStyleVar__ImPlotStyleVar_AnnotationPadding: ImPlotStyleVar_ = 23;
pub const ImPlotStyleVar__ImPlotStyleVar_FitPadding: ImPlotStyleVar_ = 24;
pub const ImPlotStyleVar__ImPlotStyleVar_PlotDefaultSize: ImPlotStyleVar_ = 25;
pub const ImPlotStyleVar__ImPlotStyleVar_PlotMinSize: ImPlotStyleVar_ = 26;
pub const ImPlotStyleVar__ImPlotStyleVar_COUNT: ImPlotStyleVar_ = 27;
pub type ImPlotStyleVar_ = ::std::os::raw::c_uint;
pub const ImPlotScale__ImPlotScale_Linear: ImPlotScale_ = 0;
pub const ImPlotScale__ImPlotScale_Time: ImPlotScale_ = 1;
pub const ImPlotScale__ImPlotScale_Log10: ImPlotScale_ = 2;
pub const ImPlotScale__ImPlotScale_SymLog: ImPlotScale_ = 3;
pub type ImPlotScale_ = ::std::os::raw::c_uint;
pub const ImPlotMarker__ImPlotMarker_None: ImPlotMarker_ = -1;
pub const ImPlotMarker__ImPlotMarker_Circle: ImPlotMarker_ = 0;
pub const ImPlotMarker__ImPlotMarker_Square: ImPlotMarker_ = 1;
pub const ImPlotMarker__ImPlotMarker_Diamond: ImPlotMarker_ = 2;
pub const ImPlotMarker__ImPlotMarker_Up: ImPlotMarker_ = 3;
pub const ImPlotMarker__ImPlotMarker_Down: ImPlotMarker_ = 4;
pub const ImPlotMarker__ImPlotMarker_Left: ImPlotMarker_ = 5;
pub const ImPlotMarker__ImPlotMarker_Right: ImPlotMarker_ = 6;
pub const ImPlotMarker__ImPlotMarker_Cross: ImPlotMarker_ = 7;
pub const ImPlotMarker__ImPlotMarker_Plus: ImPlotMarker_ = 8;
pub const ImPlotMarker__ImPlotMarker_Asterisk: ImPlotMarker_ = 9;
pub const ImPlotMarker__ImPlotMarker_COUNT: ImPlotMarker_ = 10;
pub type ImPlotMarker_ = ::std::os::raw::c_int;
pub const ImPlotColormap__ImPlotColormap_Deep: ImPlotColormap_ = 0;
pub const ImPlotColormap__ImPlotColormap_Dark: ImPlotColormap_ = 1;
pub const ImPlotColormap__ImPlotColormap_Pastel: ImPlotColormap_ = 2;
pub const ImPlotColormap__ImPlotColormap_Paired: ImPlotColormap_ = 3;
pub const ImPlotColormap__ImPlotColormap_Viridis: ImPlotColormap_ = 4;
pub const ImPlotColormap__ImPlotColormap_Plasma: ImPlotColormap_ = 5;
pub const ImPlotColormap__ImPlotColormap_Hot: ImPlotColormap_ = 6;
pub const ImPlotColormap__ImPlotColormap_Cool: ImPlotColormap_ = 7;
pub const ImPlotColormap__ImPlotColormap_Pink: ImPlotColormap_ = 8;
pub const ImPlotColormap__ImPlotColormap_Jet: ImPlotColormap_ = 9;
pub const ImPlotColormap__ImPlotColormap_Twilight: ImPlotColormap_ = 10;
pub const ImPlotColormap__ImPlotColormap_RdBu: ImPlotColormap_ = 11;
pub const ImPlotColormap__ImPlotColormap_BrBG: ImPlotColormap_ = 12;
pub const ImPlotColormap__ImPlotColormap_PiYG: ImPlotColormap_ = 13;
pub const ImPlotColormap__ImPlotColormap_Spectral: ImPlotColormap_ = 14;
pub const ImPlotColormap__ImPlotColormap_Greys: ImPlotColormap_ = 15;
pub type ImPlotColormap_ = ::std::os::raw::c_uint;
pub const ImPlotLocation__ImPlotLocation_Center: ImPlotLocation_ = 0;
pub const ImPlotLocation__ImPlotLocation_North: ImPlotLocation_ = 1;
pub const ImPlotLocation__ImPlotLocation_South: ImPlotLocation_ = 2;
pub const ImPlotLocation__ImPlotLocation_West: ImPlotLocation_ = 4;
pub const ImPlotLocation__ImPlotLocation_East: ImPlotLocation_ = 8;
pub const ImPlotLocation__ImPlotLocation_NorthWest: ImPlotLocation_ = 5;
pub const ImPlotLocation__ImPlotLocation_NorthEast: ImPlotLocation_ = 9;
pub const ImPlotLocation__ImPlotLocation_SouthWest: ImPlotLocation_ = 6;
pub const ImPlotLocation__ImPlotLocation_SouthEast: ImPlotLocation_ = 10;
pub type ImPlotLocation_ = ::std::os::raw::c_uint;
pub const ImPlotBin__ImPlotBin_Sqrt: ImPlotBin_ = -1;
pub const ImPlotBin__ImPlotBin_Sturges: ImPlotBin_ = -2;
pub const ImPlotBin__ImPlotBin_Rice: ImPlotBin_ = -3;
pub const ImPlotBin__ImPlotBin_Scott: ImPlotBin_ = -4;
pub type ImPlotBin_ = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImPlotPoint {
    pub x: f64,
    pub y: f64,
}
#[test]
fn bindgen_test_layout_ImPlotPoint() {
    const UNINIT: ::std::mem::MaybeUninit<ImPlotPoint> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImPlotPoint>(),
        16usize,
        concat!("Size of: ", stringify!(ImPlotPoint))
    );
    assert_eq!(
        ::std::mem::align_of::<ImPlotPoint>(),
        8usize,
        concat!("Alignment of ", stringify!(ImPlotPoint))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotPoint),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotPoint),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImPlotRange {
    pub Min: f64,
    pub Max: f64,
}
#[test]
fn bindgen_test_layout_ImPlotRange() {
    const UNINIT: ::std::mem::MaybeUninit<ImPlotRange> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImPlotRange>(),
        16usize,
        concat!("Size of: ", stringify!(ImPlotRange))
    );
    assert_eq!(
        ::std::mem::align_of::<ImPlotRange>(),
        8usize,
        concat!("Alignment of ", stringify!(ImPlotRange))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Min) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotRange),
            "::",
            stringify!(Min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Max) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotRange),
            "::",
            stringify!(Max)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImPlotRect {
    pub X: ImPlotRange,
    pub Y: ImPlotRange,
}
#[test]
fn bindgen_test_layout_ImPlotRect() {
    const UNINIT: ::std::mem::MaybeUninit<ImPlotRect> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImPlotRect>(),
        32usize,
        concat!("Size of: ", stringify!(ImPlotRect))
    );
    assert_eq!(
        ::std::mem::align_of::<ImPlotRect>(),
        8usize,
        concat!("Alignment of ", stringify!(ImPlotRect))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).X) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotRect),
            "::",
            stringify!(X)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Y) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotRect),
            "::",
            stringify!(Y)
        )
    );
}
#[repr(C)]
#[derive(Clone, Copy, Debug)]
pub struct ImPlotStyle {
    pub LineWeight: f32,
    pub Marker: ::std::os::raw::c_int,
    pub MarkerSize: f32,
    pub MarkerWeight: f32,
    pub FillAlpha: f32,
    pub ErrorBarSize: f32,
    pub ErrorBarWeight: f32,
    pub DigitalBitHeight: f32,
    pub DigitalBitGap: f32,
    pub PlotBorderSize: f32,
    pub MinorAlpha: f32,
    pub MajorTickLen: ImVec2,
    pub MinorTickLen: ImVec2,
    pub MajorTickSize: ImVec2,
    pub MinorTickSize: ImVec2,
    pub MajorGridSize: ImVec2,
    pub MinorGridSize: ImVec2,
    pub PlotPadding: ImVec2,
    pub LabelPadding: ImVec2,
    pub LegendPadding: ImVec2,
    pub LegendInnerPadding: ImVec2,
    pub LegendSpacing: ImVec2,
    pub MousePosPadding: ImVec2,
    pub AnnotationPadding: ImVec2,
    pub FitPadding: ImVec2,
    pub PlotDefaultSize: ImVec2,
    pub PlotMinSize: ImVec2,
    pub Colors: [ImVec4; 21usize],
    pub Colormap: ImPlotColormap,
    pub UseLocalTime: bool,
    pub UseISO8601: bool,
    pub Use24HourClock: bool,
}
#[test]
fn bindgen_test_layout_ImPlotStyle() {
    const UNINIT: ::std::mem::MaybeUninit<ImPlotStyle> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImPlotStyle>(),
        516usize,
        concat!("Size of: ", stringify!(ImPlotStyle))
    );
    assert_eq!(
        ::std::mem::align_of::<ImPlotStyle>(),
        4usize,
        concat!("Alignment of ", stringify!(ImPlotStyle))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LineWeight) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotStyle),
            "::",
            stringify!(LineWeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Marker) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotStyle),
            "::",
            stringify!(Marker)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MarkerSize) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotStyle),
            "::",
            stringify!(MarkerSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MarkerWeight) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotStyle),
            "::",
            stringify!(MarkerWeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FillAlpha) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotStyle),
            "::",
            stringify!(FillAlpha)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ErrorBarSize) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotStyle),
            "::",
            stringify!(ErrorBarSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ErrorBarWeight) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotStyle),
            "::",
            stringify!(ErrorBarWeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DigitalBitHeight) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotStyle),
            "::",
            stringify!(DigitalBitHeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DigitalBitGap) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotStyle),
            "::",
            stringify!(DigitalBitGap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PlotBorderSize) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotStyle),
            "::",
            stringify!(PlotBorderSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MinorAlpha) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotStyle),
            "::",
            stringify!(MinorAlpha)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MajorTickLen) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotStyle),
            "::",
            stringify!(MajorTickLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MinorTickLen) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotStyle),
            "::",
            stringify!(MinorTickLen)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MajorTickSize) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotStyle),
            "::",
            stringify!(MajorTickSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MinorTickSize) as usize - ptr as usize },
        68usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotStyle),
            "::",
            stringify!(MinorTickSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MajorGridSize) as usize - ptr as usize },
        76usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotStyle),
            "::",
            stringify!(MajorGridSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MinorGridSize) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotStyle),
            "::",
            stringify!(MinorGridSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PlotPadding) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotStyle),
            "::",
            stringify!(PlotPadding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LabelPadding) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotStyle),
            "::",
            stringify!(LabelPadding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LegendPadding) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotStyle),
            "::",
            stringify!(LegendPadding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LegendInnerPadding) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotStyle),
            "::",
            stringify!(LegendInnerPadding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LegendSpacing) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotStyle),
            "::",
            stringify!(LegendSpacing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MousePosPadding) as usize - ptr as usize },
        132usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotStyle),
            "::",
            stringify!(MousePosPadding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AnnotationPadding) as usize - ptr as usize },
        140usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotStyle),
            "::",
            stringify!(AnnotationPadding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FitPadding) as usize - ptr as usize },
        148usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotStyle),
            "::",
            stringify!(FitPadding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PlotDefaultSize) as usize - ptr as usize },
        156usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotStyle),
            "::",
            stringify!(PlotDefaultSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PlotMinSize) as usize - ptr as usize },
        164usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotStyle),
            "::",
            stringify!(PlotMinSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Colors) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotStyle),
            "::",
            stringify!(Colors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Colormap) as usize - ptr as usize },
        508usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotStyle),
            "::",
            stringify!(Colormap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UseLocalTime) as usize - ptr as usize },
        512usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotStyle),
            "::",
            stringify!(UseLocalTime)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UseISO8601) as usize - ptr as usize },
        513usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotStyle),
            "::",
            stringify!(UseISO8601)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Use24HourClock) as usize - ptr as usize },
        514usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotStyle),
            "::",
            stringify!(Use24HourClock)
        )
    );
}
#[repr(C)]
#[derive(Clone, Copy, Debug)]
pub struct ImPlotInputMap {
    pub Pan: ImGuiMouseButton,
    pub PanMod: ::std::os::raw::c_int,
    pub Fit: ImGuiMouseButton,
    pub Select: ImGuiMouseButton,
    pub SelectCancel: ImGuiMouseButton,
    pub SelectMod: ::std::os::raw::c_int,
    pub SelectHorzMod: ::std::os::raw::c_int,
    pub SelectVertMod: ::std::os::raw::c_int,
    pub Menu: ImGuiMouseButton,
    pub OverrideMod: ::std::os::raw::c_int,
    pub ZoomMod: ::std::os::raw::c_int,
    pub ZoomRate: f32,
}
#[test]
fn bindgen_test_layout_ImPlotInputMap() {
    const UNINIT: ::std::mem::MaybeUninit<ImPlotInputMap> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImPlotInputMap>(),
        48usize,
        concat!("Size of: ", stringify!(ImPlotInputMap))
    );
    assert_eq!(
        ::std::mem::align_of::<ImPlotInputMap>(),
        4usize,
        concat!("Alignment of ", stringify!(ImPlotInputMap))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Pan) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotInputMap),
            "::",
            stringify!(Pan)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PanMod) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotInputMap),
            "::",
            stringify!(PanMod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Fit) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotInputMap),
            "::",
            stringify!(Fit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Select) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotInputMap),
            "::",
            stringify!(Select)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SelectCancel) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotInputMap),
            "::",
            stringify!(SelectCancel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SelectMod) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotInputMap),
            "::",
            stringify!(SelectMod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SelectHorzMod) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotInputMap),
            "::",
            stringify!(SelectHorzMod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SelectVertMod) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotInputMap),
            "::",
            stringify!(SelectVertMod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Menu) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotInputMap),
            "::",
            stringify!(Menu)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OverrideMod) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotInputMap),
            "::",
            stringify!(OverrideMod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ZoomMod) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotInputMap),
            "::",
            stringify!(ZoomMod)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ZoomRate) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotInputMap),
            "::",
            stringify!(ZoomRate)
        )
    );
}
pub type ImPlotFormatter = ::std::option::Option<
    unsafe extern "C" fn(
        value: f64,
        buff: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type ImPlotGetter = ::std::option::Option<
    unsafe extern "C" fn(
        idx: ::std::os::raw::c_int,
        user_data: *mut ::std::os::raw::c_void,
    ) -> ImPlotPoint,
>;
pub type ImPlotTransform = ::std::option::Option<
    unsafe extern "C" fn(value: f64, user_data: *mut ::std::os::raw::c_void) -> f64,
>;
pub type ImPlotTimeUnit = ::std::os::raw::c_int;
pub type ImPlotDateFmt = ::std::os::raw::c_int;
pub type ImPlotTimeFmt = ::std::os::raw::c_int;
pub const ImPlotTimeUnit__ImPlotTimeUnit_Us: ImPlotTimeUnit_ = 0;
pub const ImPlotTimeUnit__ImPlotTimeUnit_Ms: ImPlotTimeUnit_ = 1;
pub const ImPlotTimeUnit__ImPlotTimeUnit_S: ImPlotTimeUnit_ = 2;
pub const ImPlotTimeUnit__ImPlotTimeUnit_Min: ImPlotTimeUnit_ = 3;
pub const ImPlotTimeUnit__ImPlotTimeUnit_Hr: ImPlotTimeUnit_ = 4;
pub const ImPlotTimeUnit__ImPlotTimeUnit_Day: ImPlotTimeUnit_ = 5;
pub const ImPlotTimeUnit__ImPlotTimeUnit_Mo: ImPlotTimeUnit_ = 6;
pub const ImPlotTimeUnit__ImPlotTimeUnit_Yr: ImPlotTimeUnit_ = 7;
pub const ImPlotTimeUnit__ImPlotTimeUnit_COUNT: ImPlotTimeUnit_ = 8;
pub type ImPlotTimeUnit_ = ::std::os::raw::c_uint;
pub const ImPlotDateFmt__ImPlotDateFmt_None: ImPlotDateFmt_ = 0;
pub const ImPlotDateFmt__ImPlotDateFmt_DayMo: ImPlotDateFmt_ = 1;
pub const ImPlotDateFmt__ImPlotDateFmt_DayMoYr: ImPlotDateFmt_ = 2;
pub const ImPlotDateFmt__ImPlotDateFmt_MoYr: ImPlotDateFmt_ = 3;
pub const ImPlotDateFmt__ImPlotDateFmt_Mo: ImPlotDateFmt_ = 4;
pub const ImPlotDateFmt__ImPlotDateFmt_Yr: ImPlotDateFmt_ = 5;
pub type ImPlotDateFmt_ = ::std::os::raw::c_uint;
pub const ImPlotTimeFmt__ImPlotTimeFmt_None: ImPlotTimeFmt_ = 0;
pub const ImPlotTimeFmt__ImPlotTimeFmt_Us: ImPlotTimeFmt_ = 1;
pub const ImPlotTimeFmt__ImPlotTimeFmt_SUs: ImPlotTimeFmt_ = 2;
pub const ImPlotTimeFmt__ImPlotTimeFmt_SMs: ImPlotTimeFmt_ = 3;
pub const ImPlotTimeFmt__ImPlotTimeFmt_S: ImPlotTimeFmt_ = 4;
pub const ImPlotTimeFmt__ImPlotTimeFmt_MinSMs: ImPlotTimeFmt_ = 5;
pub const ImPlotTimeFmt__ImPlotTimeFmt_HrMinSMs: ImPlotTimeFmt_ = 6;
pub const ImPlotTimeFmt__ImPlotTimeFmt_HrMinS: ImPlotTimeFmt_ = 7;
pub const ImPlotTimeFmt__ImPlotTimeFmt_HrMin: ImPlotTimeFmt_ = 8;
pub const ImPlotTimeFmt__ImPlotTimeFmt_Hr: ImPlotTimeFmt_ = 9;
pub type ImPlotTimeFmt_ = ::std::os::raw::c_uint;
pub type ImPlotLocator = ::std::option::Option<
    unsafe extern "C" fn(
        ticker: *mut ImPlotTicker,
        range: ImPlotRange,
        pixels: f32,
        vertical: bool,
        formatter: ImPlotFormatter,
        formatter_data: *mut ::std::os::raw::c_void,
    ),
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImPlotDateTimeSpec {
    pub Date: ImPlotDateFmt,
    pub Time: ImPlotTimeFmt,
    pub UseISO8601: bool,
    pub Use24HourClock: bool,
}
#[test]
fn bindgen_test_layout_ImPlotDateTimeSpec() {
    const UNINIT: ::std::mem::MaybeUninit<ImPlotDateTimeSpec> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImPlotDateTimeSpec>(),
        12usize,
        concat!("Size of: ", stringify!(ImPlotDateTimeSpec))
    );
    assert_eq!(
        ::std::mem::align_of::<ImPlotDateTimeSpec>(),
        4usize,
        concat!("Alignment of ", stringify!(ImPlotDateTimeSpec))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Date) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotDateTimeSpec),
            "::",
            stringify!(Date)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Time) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotDateTimeSpec),
            "::",
            stringify!(Time)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).UseISO8601) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotDateTimeSpec),
            "::",
            stringify!(UseISO8601)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Use24HourClock) as usize - ptr as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotDateTimeSpec),
            "::",
            stringify!(Use24HourClock)
        )
    );
}
#[repr(C)]
pub struct ImPlotTime {
    pub S: time_t,
    pub Us: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ImPlotTime() {
    const UNINIT: ::std::mem::MaybeUninit<ImPlotTime> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImPlotTime>(),
        16usize,
        concat!("Size of: ", stringify!(ImPlotTime))
    );
    assert_eq!(
        ::std::mem::align_of::<ImPlotTime>(),
        8usize,
        concat!("Alignment of ", stringify!(ImPlotTime))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).S) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotTime),
            "::",
            stringify!(S)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Us) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotTime),
            "::",
            stringify!(Us)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_bool {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut bool,
}
#[test]
fn bindgen_test_layout_ImVector_bool() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_bool> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_bool>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_bool))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_bool>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_bool))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_bool),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_bool),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_bool),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
pub struct ImPlotColormapData {
    pub Keys: ImVector_ImU32,
    pub KeyCounts: ImVector_int,
    pub KeyOffsets: ImVector_int,
    pub Tables: ImVector_ImU32,
    pub TableSizes: ImVector_int,
    pub TableOffsets: ImVector_int,
    pub Text: ImGuiTextBuffer,
    pub TextOffsets: ImVector_int,
    pub Quals: ImVector_bool,
    pub Map: ImGuiStorage,
    pub Count: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ImPlotColormapData() {
    const UNINIT: ::std::mem::MaybeUninit<ImPlotColormapData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImPlotColormapData>(),
        168usize,
        concat!("Size of: ", stringify!(ImPlotColormapData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImPlotColormapData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImPlotColormapData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Keys) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotColormapData),
            "::",
            stringify!(Keys)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).KeyCounts) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotColormapData),
            "::",
            stringify!(KeyCounts)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).KeyOffsets) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotColormapData),
            "::",
            stringify!(KeyOffsets)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Tables) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotColormapData),
            "::",
            stringify!(Tables)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TableSizes) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotColormapData),
            "::",
            stringify!(TableSizes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TableOffsets) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotColormapData),
            "::",
            stringify!(TableOffsets)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Text) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotColormapData),
            "::",
            stringify!(Text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TextOffsets) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotColormapData),
            "::",
            stringify!(TextOffsets)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Quals) as usize - ptr as usize },
        128usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotColormapData),
            "::",
            stringify!(Quals)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Map) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotColormapData),
            "::",
            stringify!(Map)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Count) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotColormapData),
            "::",
            stringify!(Count)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImPlotPointError {
    pub X: f64,
    pub Y: f64,
    pub Neg: f64,
    pub Pos: f64,
}
#[test]
fn bindgen_test_layout_ImPlotPointError() {
    const UNINIT: ::std::mem::MaybeUninit<ImPlotPointError> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImPlotPointError>(),
        32usize,
        concat!("Size of: ", stringify!(ImPlotPointError))
    );
    assert_eq!(
        ::std::mem::align_of::<ImPlotPointError>(),
        8usize,
        concat!("Alignment of ", stringify!(ImPlotPointError))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).X) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotPointError),
            "::",
            stringify!(X)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Y) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotPointError),
            "::",
            stringify!(Y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Neg) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotPointError),
            "::",
            stringify!(Neg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Pos) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotPointError),
            "::",
            stringify!(Pos)
        )
    );
}
#[repr(C)]
pub struct ImPlotAnnotation {
    pub Pos: ImVec2,
    pub Offset: ImVec2,
    pub ColorBg: ImU32,
    pub ColorFg: ImU32,
    pub TextOffset: ::std::os::raw::c_int,
    pub Clamp: bool,
}
#[test]
fn bindgen_test_layout_ImPlotAnnotation() {
    const UNINIT: ::std::mem::MaybeUninit<ImPlotAnnotation> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImPlotAnnotation>(),
        32usize,
        concat!("Size of: ", stringify!(ImPlotAnnotation))
    );
    assert_eq!(
        ::std::mem::align_of::<ImPlotAnnotation>(),
        4usize,
        concat!("Alignment of ", stringify!(ImPlotAnnotation))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Pos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAnnotation),
            "::",
            stringify!(Pos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Offset) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAnnotation),
            "::",
            stringify!(Offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ColorBg) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAnnotation),
            "::",
            stringify!(ColorBg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ColorFg) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAnnotation),
            "::",
            stringify!(ColorFg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TextOffset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAnnotation),
            "::",
            stringify!(TextOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Clamp) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAnnotation),
            "::",
            stringify!(Clamp)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImPlotAnnotation {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImPlotAnnotation,
}
#[test]
fn bindgen_test_layout_ImVector_ImPlotAnnotation() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImPlotAnnotation> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImPlotAnnotation>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImPlotAnnotation))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImPlotAnnotation>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImPlotAnnotation))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImPlotAnnotation),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImPlotAnnotation),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImPlotAnnotation),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
pub struct ImPlotAnnotationCollection {
    pub Annotations: ImVector_ImPlotAnnotation,
    pub TextBuffer: ImGuiTextBuffer,
    pub Size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ImPlotAnnotationCollection() {
    const UNINIT: ::std::mem::MaybeUninit<ImPlotAnnotationCollection> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImPlotAnnotationCollection>(),
        40usize,
        concat!("Size of: ", stringify!(ImPlotAnnotationCollection))
    );
    assert_eq!(
        ::std::mem::align_of::<ImPlotAnnotationCollection>(),
        8usize,
        concat!("Alignment of ", stringify!(ImPlotAnnotationCollection))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Annotations) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAnnotationCollection),
            "::",
            stringify!(Annotations)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TextBuffer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAnnotationCollection),
            "::",
            stringify!(TextBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAnnotationCollection),
            "::",
            stringify!(Size)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImPlotTag {
    pub Axis: ImAxis,
    pub Value: f64,
    pub ColorBg: ImU32,
    pub ColorFg: ImU32,
    pub TextOffset: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ImPlotTag() {
    const UNINIT: ::std::mem::MaybeUninit<ImPlotTag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImPlotTag>(),
        32usize,
        concat!("Size of: ", stringify!(ImPlotTag))
    );
    assert_eq!(
        ::std::mem::align_of::<ImPlotTag>(),
        8usize,
        concat!("Alignment of ", stringify!(ImPlotTag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Axis) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotTag),
            "::",
            stringify!(Axis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Value) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotTag),
            "::",
            stringify!(Value)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ColorBg) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotTag),
            "::",
            stringify!(ColorBg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ColorFg) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotTag),
            "::",
            stringify!(ColorFg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TextOffset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotTag),
            "::",
            stringify!(TextOffset)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImPlotTag {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImPlotTag,
}
#[test]
fn bindgen_test_layout_ImVector_ImPlotTag() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImPlotTag> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImPlotTag>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImPlotTag))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImPlotTag>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImPlotTag))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImPlotTag),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImPlotTag),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImPlotTag),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
pub struct ImPlotTagCollection {
    pub Tags: ImVector_ImPlotTag,
    pub TextBuffer: ImGuiTextBuffer,
    pub Size: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ImPlotTagCollection() {
    const UNINIT: ::std::mem::MaybeUninit<ImPlotTagCollection> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImPlotTagCollection>(),
        40usize,
        concat!("Size of: ", stringify!(ImPlotTagCollection))
    );
    assert_eq!(
        ::std::mem::align_of::<ImPlotTagCollection>(),
        8usize,
        concat!("Alignment of ", stringify!(ImPlotTagCollection))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Tags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotTagCollection),
            "::",
            stringify!(Tags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TextBuffer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotTagCollection),
            "::",
            stringify!(TextBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotTagCollection),
            "::",
            stringify!(Size)
        )
    );
}
#[repr(C)]
pub struct ImPlotTick {
    pub PlotPos: f64,
    pub PixelPos: f32,
    pub LabelSize: ImVec2,
    pub TextOffset: ::std::os::raw::c_int,
    pub Major: bool,
    pub ShowLabel: bool,
    pub Level: ::std::os::raw::c_int,
    pub Idx: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ImPlotTick() {
    const UNINIT: ::std::mem::MaybeUninit<ImPlotTick> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImPlotTick>(),
        40usize,
        concat!("Size of: ", stringify!(ImPlotTick))
    );
    assert_eq!(
        ::std::mem::align_of::<ImPlotTick>(),
        8usize,
        concat!("Alignment of ", stringify!(ImPlotTick))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PlotPos) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotTick),
            "::",
            stringify!(PlotPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PixelPos) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotTick),
            "::",
            stringify!(PixelPos)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LabelSize) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotTick),
            "::",
            stringify!(LabelSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TextOffset) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotTick),
            "::",
            stringify!(TextOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Major) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotTick),
            "::",
            stringify!(Major)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ShowLabel) as usize - ptr as usize },
        25usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotTick),
            "::",
            stringify!(ShowLabel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Level) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotTick),
            "::",
            stringify!(Level)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Idx) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotTick),
            "::",
            stringify!(Idx)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImPlotTick {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImPlotTick,
}
#[test]
fn bindgen_test_layout_ImVector_ImPlotTick() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImPlotTick> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImPlotTick>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImPlotTick))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImPlotTick>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImPlotTick))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImPlotTick),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImPlotTick),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImPlotTick),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
pub struct ImPlotTicker {
    pub Ticks: ImVector_ImPlotTick,
    pub TextBuffer: ImGuiTextBuffer,
    pub MaxSize: ImVec2,
    pub LateSize: ImVec2,
    pub Levels: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ImPlotTicker() {
    const UNINIT: ::std::mem::MaybeUninit<ImPlotTicker> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImPlotTicker>(),
        56usize,
        concat!("Size of: ", stringify!(ImPlotTicker))
    );
    assert_eq!(
        ::std::mem::align_of::<ImPlotTicker>(),
        8usize,
        concat!("Alignment of ", stringify!(ImPlotTicker))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Ticks) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotTicker),
            "::",
            stringify!(Ticks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TextBuffer) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotTicker),
            "::",
            stringify!(TextBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MaxSize) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotTicker),
            "::",
            stringify!(MaxSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LateSize) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotTicker),
            "::",
            stringify!(LateSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Levels) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotTicker),
            "::",
            stringify!(Levels)
        )
    );
}
#[repr(C)]
pub struct ImPlotAxis {
    pub ID: ImGuiID,
    pub Flags: ImPlotAxisFlags,
    pub PreviousFlags: ImPlotAxisFlags,
    pub Range: ImPlotRange,
    pub RangeCond: ImPlotCond,
    pub Scale: ImPlotScale,
    pub FitExtents: ImPlotRange,
    pub OrthoAxis: *mut ImPlotAxis,
    pub ConstraintRange: ImPlotRange,
    pub ConstraintZoom: ImPlotRange,
    pub Ticker: ImPlotTicker,
    pub Formatter: ImPlotFormatter,
    pub FormatterData: *mut ::std::os::raw::c_void,
    pub FormatSpec: [::std::os::raw::c_char; 16usize],
    pub Locator: ImPlotLocator,
    pub LinkedMin: *mut f64,
    pub LinkedMax: *mut f64,
    pub PickerLevel: ::std::os::raw::c_int,
    pub PickerTimeMin: ImPlotTime,
    pub PickerTimeMax: ImPlotTime,
    pub TransformForward: ImPlotTransform,
    pub TransformInverse: ImPlotTransform,
    pub TransformData: *mut ::std::os::raw::c_void,
    pub PixelMin: f32,
    pub PixelMax: f32,
    pub ScaleMin: f64,
    pub ScaleMax: f64,
    pub ScaleToPixel: f64,
    pub Datum1: f32,
    pub Datum2: f32,
    pub HoverRect: ImRect,
    pub LabelOffset: ::std::os::raw::c_int,
    pub ColorMaj: ImU32,
    pub ColorMin: ImU32,
    pub ColorTick: ImU32,
    pub ColorTxt: ImU32,
    pub ColorBg: ImU32,
    pub ColorHov: ImU32,
    pub ColorAct: ImU32,
    pub ColorHiLi: ImU32,
    pub Enabled: bool,
    pub Vertical: bool,
    pub FitThisFrame: bool,
    pub HasRange: bool,
    pub HasFormatSpec: bool,
    pub ShowDefaultTicks: bool,
    pub Hovered: bool,
    pub Held: bool,
}
#[test]
fn bindgen_test_layout_ImPlotAxis() {
    const UNINIT: ::std::mem::MaybeUninit<ImPlotAxis> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImPlotAxis>(),
        376usize,
        concat!("Size of: ", stringify!(ImPlotAxis))
    );
    assert_eq!(
        ::std::mem::align_of::<ImPlotAxis>(),
        8usize,
        concat!("Alignment of ", stringify!(ImPlotAxis))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAxis),
            "::",
            stringify!(ID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAxis),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PreviousFlags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAxis),
            "::",
            stringify!(PreviousFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Range) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAxis),
            "::",
            stringify!(Range)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RangeCond) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAxis),
            "::",
            stringify!(RangeCond)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Scale) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAxis),
            "::",
            stringify!(Scale)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FitExtents) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAxis),
            "::",
            stringify!(FitExtents)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OrthoAxis) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAxis),
            "::",
            stringify!(OrthoAxis)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConstraintRange) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAxis),
            "::",
            stringify!(ConstraintRange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ConstraintZoom) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAxis),
            "::",
            stringify!(ConstraintZoom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Ticker) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAxis),
            "::",
            stringify!(Ticker)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Formatter) as usize - ptr as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAxis),
            "::",
            stringify!(Formatter)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FormatterData) as usize - ptr as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAxis),
            "::",
            stringify!(FormatterData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FormatSpec) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAxis),
            "::",
            stringify!(FormatSpec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Locator) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAxis),
            "::",
            stringify!(Locator)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LinkedMin) as usize - ptr as usize },
        192usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAxis),
            "::",
            stringify!(LinkedMin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LinkedMax) as usize - ptr as usize },
        200usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAxis),
            "::",
            stringify!(LinkedMax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PickerLevel) as usize - ptr as usize },
        208usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAxis),
            "::",
            stringify!(PickerLevel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PickerTimeMin) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAxis),
            "::",
            stringify!(PickerTimeMin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PickerTimeMax) as usize - ptr as usize },
        232usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAxis),
            "::",
            stringify!(PickerTimeMax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TransformForward) as usize - ptr as usize },
        248usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAxis),
            "::",
            stringify!(TransformForward)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TransformInverse) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAxis),
            "::",
            stringify!(TransformInverse)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TransformData) as usize - ptr as usize },
        264usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAxis),
            "::",
            stringify!(TransformData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PixelMin) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAxis),
            "::",
            stringify!(PixelMin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PixelMax) as usize - ptr as usize },
        276usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAxis),
            "::",
            stringify!(PixelMax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ScaleMin) as usize - ptr as usize },
        280usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAxis),
            "::",
            stringify!(ScaleMin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ScaleMax) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAxis),
            "::",
            stringify!(ScaleMax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ScaleToPixel) as usize - ptr as usize },
        296usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAxis),
            "::",
            stringify!(ScaleToPixel)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Datum1) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAxis),
            "::",
            stringify!(Datum1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Datum2) as usize - ptr as usize },
        308usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAxis),
            "::",
            stringify!(Datum2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HoverRect) as usize - ptr as usize },
        312usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAxis),
            "::",
            stringify!(HoverRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LabelOffset) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAxis),
            "::",
            stringify!(LabelOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ColorMaj) as usize - ptr as usize },
        332usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAxis),
            "::",
            stringify!(ColorMaj)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ColorMin) as usize - ptr as usize },
        336usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAxis),
            "::",
            stringify!(ColorMin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ColorTick) as usize - ptr as usize },
        340usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAxis),
            "::",
            stringify!(ColorTick)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ColorTxt) as usize - ptr as usize },
        344usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAxis),
            "::",
            stringify!(ColorTxt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ColorBg) as usize - ptr as usize },
        348usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAxis),
            "::",
            stringify!(ColorBg)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ColorHov) as usize - ptr as usize },
        352usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAxis),
            "::",
            stringify!(ColorHov)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ColorAct) as usize - ptr as usize },
        356usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAxis),
            "::",
            stringify!(ColorAct)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ColorHiLi) as usize - ptr as usize },
        360usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAxis),
            "::",
            stringify!(ColorHiLi)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Enabled) as usize - ptr as usize },
        364usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAxis),
            "::",
            stringify!(Enabled)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Vertical) as usize - ptr as usize },
        365usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAxis),
            "::",
            stringify!(Vertical)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FitThisFrame) as usize - ptr as usize },
        366usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAxis),
            "::",
            stringify!(FitThisFrame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HasRange) as usize - ptr as usize },
        367usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAxis),
            "::",
            stringify!(HasRange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HasFormatSpec) as usize - ptr as usize },
        368usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAxis),
            "::",
            stringify!(HasFormatSpec)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ShowDefaultTicks) as usize - ptr as usize },
        369usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAxis),
            "::",
            stringify!(ShowDefaultTicks)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Hovered) as usize - ptr as usize },
        370usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAxis),
            "::",
            stringify!(Hovered)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Held) as usize - ptr as usize },
        371usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAxis),
            "::",
            stringify!(Held)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImPlotAlignmentData {
    pub Vertical: bool,
    pub PadA: f32,
    pub PadB: f32,
    pub PadAMax: f32,
    pub PadBMax: f32,
}
#[test]
fn bindgen_test_layout_ImPlotAlignmentData() {
    const UNINIT: ::std::mem::MaybeUninit<ImPlotAlignmentData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImPlotAlignmentData>(),
        20usize,
        concat!("Size of: ", stringify!(ImPlotAlignmentData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImPlotAlignmentData>(),
        4usize,
        concat!("Alignment of ", stringify!(ImPlotAlignmentData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Vertical) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAlignmentData),
            "::",
            stringify!(Vertical)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PadA) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAlignmentData),
            "::",
            stringify!(PadA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PadB) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAlignmentData),
            "::",
            stringify!(PadB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PadAMax) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAlignmentData),
            "::",
            stringify!(PadAMax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PadBMax) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotAlignmentData),
            "::",
            stringify!(PadBMax)
        )
    );
}
#[repr(C)]
pub struct ImPlotItem {
    pub ID: ImGuiID,
    pub Color: ImU32,
    pub LegendHoverRect: ImRect,
    pub NameOffset: ::std::os::raw::c_int,
    pub Show: bool,
    pub LegendHovered: bool,
    pub SeenThisFrame: bool,
}
#[test]
fn bindgen_test_layout_ImPlotItem() {
    const UNINIT: ::std::mem::MaybeUninit<ImPlotItem> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImPlotItem>(),
        32usize,
        concat!("Size of: ", stringify!(ImPlotItem))
    );
    assert_eq!(
        ::std::mem::align_of::<ImPlotItem>(),
        4usize,
        concat!("Alignment of ", stringify!(ImPlotItem))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotItem),
            "::",
            stringify!(ID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Color) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotItem),
            "::",
            stringify!(Color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LegendHoverRect) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotItem),
            "::",
            stringify!(LegendHoverRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NameOffset) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotItem),
            "::",
            stringify!(NameOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Show) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotItem),
            "::",
            stringify!(Show)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LegendHovered) as usize - ptr as usize },
        29usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotItem),
            "::",
            stringify!(LegendHovered)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SeenThisFrame) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotItem),
            "::",
            stringify!(SeenThisFrame)
        )
    );
}
#[repr(C)]
pub struct ImPlotLegend {
    pub Flags: ImPlotLegendFlags,
    pub PreviousFlags: ImPlotLegendFlags,
    pub Location: ImPlotLocation,
    pub PreviousLocation: ImPlotLocation,
    pub Scroll: ImVec2,
    pub Indices: ImVector_int,
    pub Labels: ImGuiTextBuffer,
    pub Rect: ImRect,
    pub RectClamped: ImRect,
    pub Hovered: bool,
    pub Held: bool,
    pub CanGoInside: bool,
}
#[test]
fn bindgen_test_layout_ImPlotLegend() {
    const UNINIT: ::std::mem::MaybeUninit<ImPlotLegend> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImPlotLegend>(),
        96usize,
        concat!("Size of: ", stringify!(ImPlotLegend))
    );
    assert_eq!(
        ::std::mem::align_of::<ImPlotLegend>(),
        8usize,
        concat!("Alignment of ", stringify!(ImPlotLegend))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotLegend),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PreviousFlags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotLegend),
            "::",
            stringify!(PreviousFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Location) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotLegend),
            "::",
            stringify!(Location)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PreviousLocation) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotLegend),
            "::",
            stringify!(PreviousLocation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Scroll) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotLegend),
            "::",
            stringify!(Scroll)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Indices) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotLegend),
            "::",
            stringify!(Indices)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Labels) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotLegend),
            "::",
            stringify!(Labels)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Rect) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotLegend),
            "::",
            stringify!(Rect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RectClamped) as usize - ptr as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotLegend),
            "::",
            stringify!(RectClamped)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Hovered) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotLegend),
            "::",
            stringify!(Hovered)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Held) as usize - ptr as usize },
        89usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotLegend),
            "::",
            stringify!(Held)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CanGoInside) as usize - ptr as usize },
        90usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotLegend),
            "::",
            stringify!(CanGoInside)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImPlotItem {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImPlotItem,
}
#[test]
fn bindgen_test_layout_ImVector_ImPlotItem() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImPlotItem> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImPlotItem>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImPlotItem))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImPlotItem>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImPlotItem))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImPlotItem),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImPlotItem),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImPlotItem),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
pub struct ImPool_ImPlotItem {
    pub Buf: ImVector_ImPlotItem,
    pub Map: ImGuiStorage,
    pub FreeIdx: ImPoolIdx,
    pub AliveCount: ImPoolIdx,
}
#[test]
fn bindgen_test_layout_ImPool_ImPlotItem() {
    const UNINIT: ::std::mem::MaybeUninit<ImPool_ImPlotItem> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImPool_ImPlotItem>(),
        40usize,
        concat!("Size of: ", stringify!(ImPool_ImPlotItem))
    );
    assert_eq!(
        ::std::mem::align_of::<ImPool_ImPlotItem>(),
        8usize,
        concat!("Alignment of ", stringify!(ImPool_ImPlotItem))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Buf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPool_ImPlotItem),
            "::",
            stringify!(Buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Map) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPool_ImPlotItem),
            "::",
            stringify!(Map)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FreeIdx) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPool_ImPlotItem),
            "::",
            stringify!(FreeIdx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AliveCount) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPool_ImPlotItem),
            "::",
            stringify!(AliveCount)
        )
    );
}
#[repr(C)]
pub struct ImPlotItemGroup {
    pub ID: ImGuiID,
    pub Legend: ImPlotLegend,
    pub ItemPool: ImPool_ImPlotItem,
    pub ColormapIdx: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_ImPlotItemGroup() {
    const UNINIT: ::std::mem::MaybeUninit<ImPlotItemGroup> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImPlotItemGroup>(),
        152usize,
        concat!("Size of: ", stringify!(ImPlotItemGroup))
    );
    assert_eq!(
        ::std::mem::align_of::<ImPlotItemGroup>(),
        8usize,
        concat!("Alignment of ", stringify!(ImPlotItemGroup))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotItemGroup),
            "::",
            stringify!(ID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Legend) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotItemGroup),
            "::",
            stringify!(Legend)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ItemPool) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotItemGroup),
            "::",
            stringify!(ItemPool)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ColormapIdx) as usize - ptr as usize },
        144usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotItemGroup),
            "::",
            stringify!(ColormapIdx)
        )
    );
}
#[repr(C)]
pub struct ImPlotPlot {
    pub ID: ImGuiID,
    pub Flags: ImPlotFlags,
    pub PreviousFlags: ImPlotFlags,
    pub MouseTextLocation: ImPlotLocation,
    pub MouseTextFlags: ImPlotMouseTextFlags,
    pub Axes: [ImPlotAxis; 6usize],
    pub TextBuffer: ImGuiTextBuffer,
    pub Items: ImPlotItemGroup,
    pub CurrentX: ImAxis,
    pub CurrentY: ImAxis,
    pub FrameRect: ImRect,
    pub CanvasRect: ImRect,
    pub PlotRect: ImRect,
    pub AxesRect: ImRect,
    pub SelectRect: ImRect,
    pub SelectStart: ImVec2,
    pub TitleOffset: ::std::os::raw::c_int,
    pub JustCreated: bool,
    pub Initialized: bool,
    pub SetupLocked: bool,
    pub FitThisFrame: bool,
    pub Hovered: bool,
    pub Held: bool,
    pub Selecting: bool,
    pub Selected: bool,
    pub ContextLocked: bool,
}
#[test]
fn bindgen_test_layout_ImPlotPlot() {
    const UNINIT: ::std::mem::MaybeUninit<ImPlotPlot> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImPlotPlot>(),
        2560usize,
        concat!("Size of: ", stringify!(ImPlotPlot))
    );
    assert_eq!(
        ::std::mem::align_of::<ImPlotPlot>(),
        8usize,
        concat!("Alignment of ", stringify!(ImPlotPlot))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotPlot),
            "::",
            stringify!(ID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotPlot),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PreviousFlags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotPlot),
            "::",
            stringify!(PreviousFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseTextLocation) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotPlot),
            "::",
            stringify!(MouseTextLocation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MouseTextFlags) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotPlot),
            "::",
            stringify!(MouseTextFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Axes) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotPlot),
            "::",
            stringify!(Axes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TextBuffer) as usize - ptr as usize },
        2280usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotPlot),
            "::",
            stringify!(TextBuffer)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Items) as usize - ptr as usize },
        2296usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotPlot),
            "::",
            stringify!(Items)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CurrentX) as usize - ptr as usize },
        2448usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotPlot),
            "::",
            stringify!(CurrentX)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CurrentY) as usize - ptr as usize },
        2452usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotPlot),
            "::",
            stringify!(CurrentY)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FrameRect) as usize - ptr as usize },
        2456usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotPlot),
            "::",
            stringify!(FrameRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CanvasRect) as usize - ptr as usize },
        2472usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotPlot),
            "::",
            stringify!(CanvasRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PlotRect) as usize - ptr as usize },
        2488usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotPlot),
            "::",
            stringify!(PlotRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AxesRect) as usize - ptr as usize },
        2504usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotPlot),
            "::",
            stringify!(AxesRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SelectRect) as usize - ptr as usize },
        2520usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotPlot),
            "::",
            stringify!(SelectRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SelectStart) as usize - ptr as usize },
        2536usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotPlot),
            "::",
            stringify!(SelectStart)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TitleOffset) as usize - ptr as usize },
        2544usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotPlot),
            "::",
            stringify!(TitleOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).JustCreated) as usize - ptr as usize },
        2548usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotPlot),
            "::",
            stringify!(JustCreated)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Initialized) as usize - ptr as usize },
        2549usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotPlot),
            "::",
            stringify!(Initialized)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SetupLocked) as usize - ptr as usize },
        2550usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotPlot),
            "::",
            stringify!(SetupLocked)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FitThisFrame) as usize - ptr as usize },
        2551usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotPlot),
            "::",
            stringify!(FitThisFrame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Hovered) as usize - ptr as usize },
        2552usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotPlot),
            "::",
            stringify!(Hovered)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Held) as usize - ptr as usize },
        2553usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotPlot),
            "::",
            stringify!(Held)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Selecting) as usize - ptr as usize },
        2554usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotPlot),
            "::",
            stringify!(Selecting)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Selected) as usize - ptr as usize },
        2555usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotPlot),
            "::",
            stringify!(Selected)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ContextLocked) as usize - ptr as usize },
        2556usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotPlot),
            "::",
            stringify!(ContextLocked)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImPlotAlignmentData {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImPlotAlignmentData,
}
#[test]
fn bindgen_test_layout_ImVector_ImPlotAlignmentData() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImPlotAlignmentData> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImPlotAlignmentData>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImPlotAlignmentData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImPlotAlignmentData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImPlotAlignmentData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImPlotAlignmentData),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImPlotAlignmentData),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImPlotAlignmentData),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImPlotRange {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImPlotRange,
}
#[test]
fn bindgen_test_layout_ImVector_ImPlotRange() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImPlotRange> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImPlotRange>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImPlotRange))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImPlotRange>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImPlotRange))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImPlotRange),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImPlotRange),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImPlotRange),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
pub struct ImPlotSubplot {
    pub ID: ImGuiID,
    pub Flags: ImPlotSubplotFlags,
    pub PreviousFlags: ImPlotSubplotFlags,
    pub Items: ImPlotItemGroup,
    pub Rows: ::std::os::raw::c_int,
    pub Cols: ::std::os::raw::c_int,
    pub CurrentIdx: ::std::os::raw::c_int,
    pub FrameRect: ImRect,
    pub GridRect: ImRect,
    pub CellSize: ImVec2,
    pub RowAlignmentData: ImVector_ImPlotAlignmentData,
    pub ColAlignmentData: ImVector_ImPlotAlignmentData,
    pub RowRatios: ImVector_float,
    pub ColRatios: ImVector_float,
    pub RowLinkData: ImVector_ImPlotRange,
    pub ColLinkData: ImVector_ImPlotRange,
    pub TempSizes: [f32; 2usize],
    pub FrameHovered: bool,
    pub HasTitle: bool,
}
#[test]
fn bindgen_test_layout_ImPlotSubplot() {
    const UNINIT: ::std::mem::MaybeUninit<ImPlotSubplot> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImPlotSubplot>(),
        336usize,
        concat!("Size of: ", stringify!(ImPlotSubplot))
    );
    assert_eq!(
        ::std::mem::align_of::<ImPlotSubplot>(),
        8usize,
        concat!("Alignment of ", stringify!(ImPlotSubplot))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ID) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotSubplot),
            "::",
            stringify!(ID)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Flags) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotSubplot),
            "::",
            stringify!(Flags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PreviousFlags) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotSubplot),
            "::",
            stringify!(PreviousFlags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Items) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotSubplot),
            "::",
            stringify!(Items)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Rows) as usize - ptr as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotSubplot),
            "::",
            stringify!(Rows)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Cols) as usize - ptr as usize },
        172usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotSubplot),
            "::",
            stringify!(Cols)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CurrentIdx) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotSubplot),
            "::",
            stringify!(CurrentIdx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FrameRect) as usize - ptr as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotSubplot),
            "::",
            stringify!(FrameRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).GridRect) as usize - ptr as usize },
        196usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotSubplot),
            "::",
            stringify!(GridRect)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CellSize) as usize - ptr as usize },
        212usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotSubplot),
            "::",
            stringify!(CellSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RowAlignmentData) as usize - ptr as usize },
        224usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotSubplot),
            "::",
            stringify!(RowAlignmentData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ColAlignmentData) as usize - ptr as usize },
        240usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotSubplot),
            "::",
            stringify!(ColAlignmentData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RowRatios) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotSubplot),
            "::",
            stringify!(RowRatios)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ColRatios) as usize - ptr as usize },
        272usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotSubplot),
            "::",
            stringify!(ColRatios)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RowLinkData) as usize - ptr as usize },
        288usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotSubplot),
            "::",
            stringify!(RowLinkData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ColLinkData) as usize - ptr as usize },
        304usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotSubplot),
            "::",
            stringify!(ColLinkData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TempSizes) as usize - ptr as usize },
        320usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotSubplot),
            "::",
            stringify!(TempSizes)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FrameHovered) as usize - ptr as usize },
        328usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotSubplot),
            "::",
            stringify!(FrameHovered)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HasTitle) as usize - ptr as usize },
        329usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotSubplot),
            "::",
            stringify!(HasTitle)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImPlotNextPlotData {
    pub RangeCond: [ImPlotCond; 6usize],
    pub Range: [ImPlotRange; 6usize],
    pub HasRange: [bool; 6usize],
    pub Fit: [bool; 6usize],
    pub LinkedMin: [*mut f64; 6usize],
    pub LinkedMax: [*mut f64; 6usize],
}
#[test]
fn bindgen_test_layout_ImPlotNextPlotData() {
    const UNINIT: ::std::mem::MaybeUninit<ImPlotNextPlotData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImPlotNextPlotData>(),
        232usize,
        concat!("Size of: ", stringify!(ImPlotNextPlotData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImPlotNextPlotData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImPlotNextPlotData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RangeCond) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotNextPlotData),
            "::",
            stringify!(RangeCond)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Range) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotNextPlotData),
            "::",
            stringify!(Range)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HasRange) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotNextPlotData),
            "::",
            stringify!(HasRange)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Fit) as usize - ptr as usize },
        126usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotNextPlotData),
            "::",
            stringify!(Fit)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LinkedMin) as usize - ptr as usize },
        136usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotNextPlotData),
            "::",
            stringify!(LinkedMin)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LinkedMax) as usize - ptr as usize },
        184usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotNextPlotData),
            "::",
            stringify!(LinkedMax)
        )
    );
}
#[repr(C)]
pub struct ImPlotNextItemData {
    pub Colors: [ImVec4; 5usize],
    pub LineWeight: f32,
    pub Marker: ImPlotMarker,
    pub MarkerSize: f32,
    pub MarkerWeight: f32,
    pub FillAlpha: f32,
    pub ErrorBarSize: f32,
    pub ErrorBarWeight: f32,
    pub DigitalBitHeight: f32,
    pub DigitalBitGap: f32,
    pub RenderLine: bool,
    pub RenderFill: bool,
    pub RenderMarkerLine: bool,
    pub RenderMarkerFill: bool,
    pub HasHidden: bool,
    pub Hidden: bool,
    pub HiddenCond: ImPlotCond,
}
#[test]
fn bindgen_test_layout_ImPlotNextItemData() {
    const UNINIT: ::std::mem::MaybeUninit<ImPlotNextItemData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImPlotNextItemData>(),
        128usize,
        concat!("Size of: ", stringify!(ImPlotNextItemData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImPlotNextItemData>(),
        4usize,
        concat!("Alignment of ", stringify!(ImPlotNextItemData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Colors) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotNextItemData),
            "::",
            stringify!(Colors)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).LineWeight) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotNextItemData),
            "::",
            stringify!(LineWeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Marker) as usize - ptr as usize },
        84usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotNextItemData),
            "::",
            stringify!(Marker)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MarkerSize) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotNextItemData),
            "::",
            stringify!(MarkerSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MarkerWeight) as usize - ptr as usize },
        92usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotNextItemData),
            "::",
            stringify!(MarkerWeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FillAlpha) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotNextItemData),
            "::",
            stringify!(FillAlpha)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ErrorBarSize) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotNextItemData),
            "::",
            stringify!(ErrorBarSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ErrorBarWeight) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotNextItemData),
            "::",
            stringify!(ErrorBarWeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DigitalBitHeight) as usize - ptr as usize },
        108usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotNextItemData),
            "::",
            stringify!(DigitalBitHeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DigitalBitGap) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotNextItemData),
            "::",
            stringify!(DigitalBitGap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RenderLine) as usize - ptr as usize },
        116usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotNextItemData),
            "::",
            stringify!(RenderLine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RenderFill) as usize - ptr as usize },
        117usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotNextItemData),
            "::",
            stringify!(RenderFill)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RenderMarkerLine) as usize - ptr as usize },
        118usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotNextItemData),
            "::",
            stringify!(RenderMarkerLine)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).RenderMarkerFill) as usize - ptr as usize },
        119usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotNextItemData),
            "::",
            stringify!(RenderMarkerFill)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HasHidden) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotNextItemData),
            "::",
            stringify!(HasHidden)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Hidden) as usize - ptr as usize },
        121usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotNextItemData),
            "::",
            stringify!(Hidden)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).HiddenCond) as usize - ptr as usize },
        124usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotNextItemData),
            "::",
            stringify!(HiddenCond)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImPlotPlot {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImPlotPlot,
}
#[test]
fn bindgen_test_layout_ImVector_ImPlotPlot() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImPlotPlot> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImPlotPlot>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImPlotPlot))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImPlotPlot>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImPlotPlot))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImPlotPlot),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImPlotPlot),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImPlotPlot),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
pub struct ImPool_ImPlotPlot {
    pub Buf: ImVector_ImPlotPlot,
    pub Map: ImGuiStorage,
    pub FreeIdx: ImPoolIdx,
    pub AliveCount: ImPoolIdx,
}
#[test]
fn bindgen_test_layout_ImPool_ImPlotPlot() {
    const UNINIT: ::std::mem::MaybeUninit<ImPool_ImPlotPlot> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImPool_ImPlotPlot>(),
        40usize,
        concat!("Size of: ", stringify!(ImPool_ImPlotPlot))
    );
    assert_eq!(
        ::std::mem::align_of::<ImPool_ImPlotPlot>(),
        8usize,
        concat!("Alignment of ", stringify!(ImPool_ImPlotPlot))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Buf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPool_ImPlotPlot),
            "::",
            stringify!(Buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Map) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPool_ImPlotPlot),
            "::",
            stringify!(Map)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FreeIdx) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPool_ImPlotPlot),
            "::",
            stringify!(FreeIdx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AliveCount) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPool_ImPlotPlot),
            "::",
            stringify!(AliveCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImPlotSubplot {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImPlotSubplot,
}
#[test]
fn bindgen_test_layout_ImVector_ImPlotSubplot() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImPlotSubplot> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImPlotSubplot>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImPlotSubplot))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImPlotSubplot>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImPlotSubplot))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImPlotSubplot),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImPlotSubplot),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImPlotSubplot),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
pub struct ImPool_ImPlotSubplot {
    pub Buf: ImVector_ImPlotSubplot,
    pub Map: ImGuiStorage,
    pub FreeIdx: ImPoolIdx,
    pub AliveCount: ImPoolIdx,
}
#[test]
fn bindgen_test_layout_ImPool_ImPlotSubplot() {
    const UNINIT: ::std::mem::MaybeUninit<ImPool_ImPlotSubplot> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImPool_ImPlotSubplot>(),
        40usize,
        concat!("Size of: ", stringify!(ImPool_ImPlotSubplot))
    );
    assert_eq!(
        ::std::mem::align_of::<ImPool_ImPlotSubplot>(),
        8usize,
        concat!("Alignment of ", stringify!(ImPool_ImPlotSubplot))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Buf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPool_ImPlotSubplot),
            "::",
            stringify!(Buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Map) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPool_ImPlotSubplot),
            "::",
            stringify!(Map)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FreeIdx) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPool_ImPlotSubplot),
            "::",
            stringify!(FreeIdx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AliveCount) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPool_ImPlotSubplot),
            "::",
            stringify!(AliveCount)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_ImPlotColormap {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut ImPlotColormap,
}
#[test]
fn bindgen_test_layout_ImVector_ImPlotColormap() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_ImPlotColormap> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_ImPlotColormap>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_ImPlotColormap))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_ImPlotColormap>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_ImPlotColormap))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImPlotColormap),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImPlotColormap),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_ImPlotColormap),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImVector_double {
    pub Size: ::std::os::raw::c_int,
    pub Capacity: ::std::os::raw::c_int,
    pub Data: *mut f64,
}
#[test]
fn bindgen_test_layout_ImVector_double() {
    const UNINIT: ::std::mem::MaybeUninit<ImVector_double> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImVector_double>(),
        16usize,
        concat!("Size of: ", stringify!(ImVector_double))
    );
    assert_eq!(
        ::std::mem::align_of::<ImVector_double>(),
        8usize,
        concat!("Alignment of ", stringify!(ImVector_double))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Size) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_double),
            "::",
            stringify!(Size)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Capacity) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_double),
            "::",
            stringify!(Capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Data) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(ImVector_double),
            "::",
            stringify!(Data)
        )
    );
}
#[repr(C)]
pub struct ImPool_ImPlotAlignmentData {
    pub Buf: ImVector_ImPlotAlignmentData,
    pub Map: ImGuiStorage,
    pub FreeIdx: ImPoolIdx,
    pub AliveCount: ImPoolIdx,
}
#[test]
fn bindgen_test_layout_ImPool_ImPlotAlignmentData() {
    const UNINIT: ::std::mem::MaybeUninit<ImPool_ImPlotAlignmentData> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImPool_ImPlotAlignmentData>(),
        40usize,
        concat!("Size of: ", stringify!(ImPool_ImPlotAlignmentData))
    );
    assert_eq!(
        ::std::mem::align_of::<ImPool_ImPlotAlignmentData>(),
        8usize,
        concat!("Alignment of ", stringify!(ImPool_ImPlotAlignmentData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Buf) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPool_ImPlotAlignmentData),
            "::",
            stringify!(Buf)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Map) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPool_ImPlotAlignmentData),
            "::",
            stringify!(Map)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).FreeIdx) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPool_ImPlotAlignmentData),
            "::",
            stringify!(FreeIdx)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AliveCount) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPool_ImPlotAlignmentData),
            "::",
            stringify!(AliveCount)
        )
    );
}
#[repr(C)]
pub struct ImPlotContext {
    pub Plots: ImPool_ImPlotPlot,
    pub Subplots: ImPool_ImPlotSubplot,
    pub CurrentPlot: *mut ImPlotPlot,
    pub CurrentSubplot: *mut ImPlotSubplot,
    pub CurrentItems: *mut ImPlotItemGroup,
    pub CurrentItem: *mut ImPlotItem,
    pub PreviousItem: *mut ImPlotItem,
    pub CTicker: ImPlotTicker,
    pub Annotations: ImPlotAnnotationCollection,
    pub Tags: ImPlotTagCollection,
    pub Style: ImPlotStyle,
    pub ColorModifiers: ImVector_ImGuiColorMod,
    pub StyleModifiers: ImVector_ImGuiStyleMod,
    pub ColormapData: ImPlotColormapData,
    pub ColormapModifiers: ImVector_ImPlotColormap,
    pub Tm: tm,
    pub TempDouble1: ImVector_double,
    pub TempDouble2: ImVector_double,
    pub TempInt1: ImVector_int,
    pub DigitalPlotItemCnt: ::std::os::raw::c_int,
    pub DigitalPlotOffset: ::std::os::raw::c_int,
    pub NextPlotData: ImPlotNextPlotData,
    pub NextItemData: ImPlotNextItemData,
    pub InputMap: ImPlotInputMap,
    pub OpenContextThisFrame: bool,
    pub MousePosStringBuilder: ImGuiTextBuffer,
    pub SortItems: *mut ImPlotItemGroup,
    pub AlignmentData: ImPool_ImPlotAlignmentData,
    pub CurrentAlignmentH: *mut ImPlotAlignmentData,
    pub CurrentAlignmentV: *mut ImPlotAlignmentData,
}
#[test]
fn bindgen_test_layout_ImPlotContext() {
    const UNINIT: ::std::mem::MaybeUninit<ImPlotContext> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<ImPlotContext>(),
        1600usize,
        concat!("Size of: ", stringify!(ImPlotContext))
    );
    assert_eq!(
        ::std::mem::align_of::<ImPlotContext>(),
        8usize,
        concat!("Alignment of ", stringify!(ImPlotContext))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Plots) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotContext),
            "::",
            stringify!(Plots)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Subplots) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotContext),
            "::",
            stringify!(Subplots)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CurrentPlot) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotContext),
            "::",
            stringify!(CurrentPlot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CurrentSubplot) as usize - ptr as usize },
        88usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotContext),
            "::",
            stringify!(CurrentSubplot)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CurrentItems) as usize - ptr as usize },
        96usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotContext),
            "::",
            stringify!(CurrentItems)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CurrentItem) as usize - ptr as usize },
        104usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotContext),
            "::",
            stringify!(CurrentItem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).PreviousItem) as usize - ptr as usize },
        112usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotContext),
            "::",
            stringify!(PreviousItem)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CTicker) as usize - ptr as usize },
        120usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotContext),
            "::",
            stringify!(CTicker)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Annotations) as usize - ptr as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotContext),
            "::",
            stringify!(Annotations)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Tags) as usize - ptr as usize },
        216usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotContext),
            "::",
            stringify!(Tags)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Style) as usize - ptr as usize },
        256usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotContext),
            "::",
            stringify!(Style)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ColorModifiers) as usize - ptr as usize },
        776usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotContext),
            "::",
            stringify!(ColorModifiers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).StyleModifiers) as usize - ptr as usize },
        792usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotContext),
            "::",
            stringify!(StyleModifiers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ColormapData) as usize - ptr as usize },
        808usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotContext),
            "::",
            stringify!(ColormapData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ColormapModifiers) as usize - ptr as usize },
        976usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotContext),
            "::",
            stringify!(ColormapModifiers)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).Tm) as usize - ptr as usize },
        992usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotContext),
            "::",
            stringify!(Tm)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TempDouble1) as usize - ptr as usize },
        1048usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotContext),
            "::",
            stringify!(TempDouble1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TempDouble2) as usize - ptr as usize },
        1064usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotContext),
            "::",
            stringify!(TempDouble2)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).TempInt1) as usize - ptr as usize },
        1080usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotContext),
            "::",
            stringify!(TempInt1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DigitalPlotItemCnt) as usize - ptr as usize },
        1096usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotContext),
            "::",
            stringify!(DigitalPlotItemCnt)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).DigitalPlotOffset) as usize - ptr as usize },
        1100usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotContext),
            "::",
            stringify!(DigitalPlotOffset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NextPlotData) as usize - ptr as usize },
        1104usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotContext),
            "::",
            stringify!(NextPlotData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).NextItemData) as usize - ptr as usize },
        1336usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotContext),
            "::",
            stringify!(NextItemData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).InputMap) as usize - ptr as usize },
        1464usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotContext),
            "::",
            stringify!(InputMap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).OpenContextThisFrame) as usize - ptr as usize },
        1512usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotContext),
            "::",
            stringify!(OpenContextThisFrame)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).MousePosStringBuilder) as usize - ptr as usize },
        1520usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotContext),
            "::",
            stringify!(MousePosStringBuilder)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).SortItems) as usize - ptr as usize },
        1536usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotContext),
            "::",
            stringify!(SortItems)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).AlignmentData) as usize - ptr as usize },
        1544usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotContext),
            "::",
            stringify!(AlignmentData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CurrentAlignmentH) as usize - ptr as usize },
        1584usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotContext),
            "::",
            stringify!(CurrentAlignmentH)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).CurrentAlignmentV) as usize - ptr as usize },
        1592usize,
        concat!(
            "Offset of field: ",
            stringify!(ImPlotContext),
            "::",
            stringify!(CurrentAlignmentV)
        )
    );
}
pub type ImPlotPoint_getter = ::std::option::Option<
    unsafe extern "C" fn(
        data: *mut ::std::os::raw::c_void,
        idx: ::std::os::raw::c_int,
        point: *mut ImPlotPoint,
    ) -> *mut ::std::os::raw::c_void,
>;
extern "C" {
    pub fn ImPlotPoint_ImPlotPoint_Nil() -> *mut ImPlotPoint;
}
extern "C" {
    pub fn ImPlotPoint_destroy(self_: *mut ImPlotPoint);
}
extern "C" {
    pub fn ImPlotPoint_ImPlotPoint_double(_x: f64, _y: f64) -> *mut ImPlotPoint;
}
extern "C" {
    pub fn ImPlotPoint_ImPlotPoint_Vec2(p: ImVec2) -> *mut ImPlotPoint;
}
extern "C" {
    pub fn ImPlotRange_ImPlotRange_Nil() -> *mut ImPlotRange;
}
extern "C" {
    pub fn ImPlotRange_destroy(self_: *mut ImPlotRange);
}
extern "C" {
    pub fn ImPlotRange_ImPlotRange_double(_min: f64, _max: f64) -> *mut ImPlotRange;
}
extern "C" {
    pub fn ImPlotRange_Contains(self_: *mut ImPlotRange, value: f64) -> bool;
}
extern "C" {
    pub fn ImPlotRange_Size(self_: *mut ImPlotRange) -> f64;
}
extern "C" {
    pub fn ImPlotRange_Clamp(self_: *mut ImPlotRange, value: f64) -> f64;
}
extern "C" {
    pub fn ImPlotRect_ImPlotRect_Nil() -> *mut ImPlotRect;
}
extern "C" {
    pub fn ImPlotRect_destroy(self_: *mut ImPlotRect);
}
extern "C" {
    pub fn ImPlotRect_ImPlotRect_double(
        x_min: f64,
        x_max: f64,
        y_min: f64,
        y_max: f64,
    ) -> *mut ImPlotRect;
}
extern "C" {
    pub fn ImPlotRect_Contains_PlotPoInt(self_: *mut ImPlotRect, p: ImPlotPoint) -> bool;
}
extern "C" {
    pub fn ImPlotRect_Contains_double(self_: *mut ImPlotRect, x: f64, y: f64) -> bool;
}
extern "C" {
    pub fn ImPlotRect_Size(pOut: *mut ImPlotPoint, self_: *mut ImPlotRect);
}
extern "C" {
    pub fn ImPlotRect_Clamp_PlotPoInt(
        pOut: *mut ImPlotPoint,
        self_: *mut ImPlotRect,
        p: ImPlotPoint,
    );
}
extern "C" {
    pub fn ImPlotRect_Clamp_double(pOut: *mut ImPlotPoint, self_: *mut ImPlotRect, x: f64, y: f64);
}
extern "C" {
    pub fn ImPlotRect_Min(pOut: *mut ImPlotPoint, self_: *mut ImPlotRect);
}
extern "C" {
    pub fn ImPlotRect_Max(pOut: *mut ImPlotPoint, self_: *mut ImPlotRect);
}
extern "C" {
    pub fn ImPlotStyle_ImPlotStyle() -> *mut ImPlotStyle;
}
extern "C" {
    pub fn ImPlotStyle_destroy(self_: *mut ImPlotStyle);
}
extern "C" {
    pub fn ImPlotInputMap_ImPlotInputMap() -> *mut ImPlotInputMap;
}
extern "C" {
    pub fn ImPlotInputMap_destroy(self_: *mut ImPlotInputMap);
}
extern "C" {
    pub fn ImPlot_CreateContext() -> *mut ImPlotContext;
}
extern "C" {
    pub fn ImPlot_DestroyContext(ctx: *mut ImPlotContext);
}
extern "C" {
    pub fn ImPlot_GetCurrentContext() -> *mut ImPlotContext;
}
extern "C" {
    pub fn ImPlot_SetCurrentContext(ctx: *mut ImPlotContext);
}
extern "C" {
    pub fn ImPlot_SetImGuiContext(ctx: *mut ImGuiContext);
}
extern "C" {
    pub fn ImPlot_BeginPlot(
        title_id: *const ::std::os::raw::c_char,
        size: ImVec2,
        flags: ImPlotFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImPlot_EndPlot();
}
extern "C" {
    pub fn ImPlot_BeginSubplots(
        title_id: *const ::std::os::raw::c_char,
        rows: ::std::os::raw::c_int,
        cols: ::std::os::raw::c_int,
        size: ImVec2,
        flags: ImPlotSubplotFlags,
        row_ratios: *mut f32,
        col_ratios: *mut f32,
    ) -> bool;
}
extern "C" {
    pub fn ImPlot_EndSubplots();
}
extern "C" {
    pub fn ImPlot_SetupAxis(
        axis: ImAxis,
        label: *const ::std::os::raw::c_char,
        flags: ImPlotAxisFlags,
    );
}
extern "C" {
    pub fn ImPlot_SetupAxisLimits(axis: ImAxis, v_min: f64, v_max: f64, cond: ImPlotCond);
}
extern "C" {
    pub fn ImPlot_SetupAxisLinks(axis: ImAxis, link_min: *mut f64, link_max: *mut f64);
}
extern "C" {
    pub fn ImPlot_SetupAxisFormat_Str(axis: ImAxis, fmt: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn ImPlot_SetupAxisFormat_PlotFormatter(
        axis: ImAxis,
        formatter: ImPlotFormatter,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn ImPlot_SetupAxisTicks_doublePtr(
        axis: ImAxis,
        values: *const f64,
        n_ticks: ::std::os::raw::c_int,
        labels: *const *const ::std::os::raw::c_char,
        keep_default: bool,
    );
}
extern "C" {
    pub fn ImPlot_SetupAxisTicks_double(
        axis: ImAxis,
        v_min: f64,
        v_max: f64,
        n_ticks: ::std::os::raw::c_int,
        labels: *const *const ::std::os::raw::c_char,
        keep_default: bool,
    );
}
extern "C" {
    pub fn ImPlot_SetupAxisScale_PlotScale(axis: ImAxis, scale: ImPlotScale);
}
extern "C" {
    pub fn ImPlot_SetupAxisScale_PlotTransform(
        axis: ImAxis,
        forward: ImPlotTransform,
        inverse: ImPlotTransform,
        data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn ImPlot_SetupAxisLimitsConstraints(axis: ImAxis, v_min: f64, v_max: f64);
}
extern "C" {
    pub fn ImPlot_SetupAxisZoomConstraints(axis: ImAxis, z_min: f64, z_max: f64);
}
extern "C" {
    pub fn ImPlot_SetupAxes(
        x_label: *const ::std::os::raw::c_char,
        y_label: *const ::std::os::raw::c_char,
        x_flags: ImPlotAxisFlags,
        y_flags: ImPlotAxisFlags,
    );
}
extern "C" {
    pub fn ImPlot_SetupAxesLimits(x_min: f64, x_max: f64, y_min: f64, y_max: f64, cond: ImPlotCond);
}
extern "C" {
    pub fn ImPlot_SetupLegend(location: ImPlotLocation, flags: ImPlotLegendFlags);
}
extern "C" {
    pub fn ImPlot_SetupMouseText(location: ImPlotLocation, flags: ImPlotMouseTextFlags);
}
extern "C" {
    pub fn ImPlot_SetupFinish();
}
extern "C" {
    pub fn ImPlot_SetNextAxisLimits(axis: ImAxis, v_min: f64, v_max: f64, cond: ImPlotCond);
}
extern "C" {
    pub fn ImPlot_SetNextAxisLinks(axis: ImAxis, link_min: *mut f64, link_max: *mut f64);
}
extern "C" {
    pub fn ImPlot_SetNextAxisToFit(axis: ImAxis);
}
extern "C" {
    pub fn ImPlot_SetNextAxesLimits(
        x_min: f64,
        x_max: f64,
        y_min: f64,
        y_max: f64,
        cond: ImPlotCond,
    );
}
extern "C" {
    pub fn ImPlot_SetNextAxesToFit();
}
extern "C" {
    pub fn ImPlot_PlotLine_FloatPtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const f32,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotLineFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotLine_doublePtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const f64,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotLineFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotLine_S8PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS8,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotLineFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotLine_U8PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU8,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotLineFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotLine_S16PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS16,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotLineFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotLine_U16PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU16,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotLineFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotLine_S32PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS32,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotLineFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotLine_U32PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU32,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotLineFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotLine_S64PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS64,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotLineFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotLine_U64PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU64,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotLineFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotLine_FloatPtrFloatPtr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const f32,
        ys: *const f32,
        count: ::std::os::raw::c_int,
        flags: ImPlotLineFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotLine_doublePtrdoublePtr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const f64,
        ys: *const f64,
        count: ::std::os::raw::c_int,
        flags: ImPlotLineFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotLine_S8PtrS8Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS8,
        ys: *const ImS8,
        count: ::std::os::raw::c_int,
        flags: ImPlotLineFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotLine_U8PtrU8Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU8,
        ys: *const ImU8,
        count: ::std::os::raw::c_int,
        flags: ImPlotLineFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotLine_S16PtrS16Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS16,
        ys: *const ImS16,
        count: ::std::os::raw::c_int,
        flags: ImPlotLineFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotLine_U16PtrU16Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU16,
        ys: *const ImU16,
        count: ::std::os::raw::c_int,
        flags: ImPlotLineFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotLine_S32PtrS32Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS32,
        ys: *const ImS32,
        count: ::std::os::raw::c_int,
        flags: ImPlotLineFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotLine_U32PtrU32Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU32,
        ys: *const ImU32,
        count: ::std::os::raw::c_int,
        flags: ImPlotLineFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotLine_S64PtrS64Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS64,
        ys: *const ImS64,
        count: ::std::os::raw::c_int,
        flags: ImPlotLineFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotLine_U64PtrU64Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU64,
        ys: *const ImU64,
        count: ::std::os::raw::c_int,
        flags: ImPlotLineFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotLineG(
        label_id: *const ::std::os::raw::c_char,
        getter: ImPlotPoint_getter,
        data: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        flags: ImPlotLineFlags,
    );
}
extern "C" {
    pub fn ImPlot_PlotScatter_FloatPtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const f32,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotScatterFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotScatter_doublePtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const f64,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotScatterFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotScatter_S8PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS8,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotScatterFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotScatter_U8PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU8,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotScatterFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotScatter_S16PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS16,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotScatterFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotScatter_U16PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU16,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotScatterFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotScatter_S32PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS32,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotScatterFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotScatter_U32PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU32,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotScatterFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotScatter_S64PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS64,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotScatterFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotScatter_U64PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU64,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotScatterFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotScatter_FloatPtrFloatPtr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const f32,
        ys: *const f32,
        count: ::std::os::raw::c_int,
        flags: ImPlotScatterFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotScatter_doublePtrdoublePtr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const f64,
        ys: *const f64,
        count: ::std::os::raw::c_int,
        flags: ImPlotScatterFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotScatter_S8PtrS8Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS8,
        ys: *const ImS8,
        count: ::std::os::raw::c_int,
        flags: ImPlotScatterFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotScatter_U8PtrU8Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU8,
        ys: *const ImU8,
        count: ::std::os::raw::c_int,
        flags: ImPlotScatterFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotScatter_S16PtrS16Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS16,
        ys: *const ImS16,
        count: ::std::os::raw::c_int,
        flags: ImPlotScatterFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotScatter_U16PtrU16Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU16,
        ys: *const ImU16,
        count: ::std::os::raw::c_int,
        flags: ImPlotScatterFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotScatter_S32PtrS32Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS32,
        ys: *const ImS32,
        count: ::std::os::raw::c_int,
        flags: ImPlotScatterFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotScatter_U32PtrU32Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU32,
        ys: *const ImU32,
        count: ::std::os::raw::c_int,
        flags: ImPlotScatterFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotScatter_S64PtrS64Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS64,
        ys: *const ImS64,
        count: ::std::os::raw::c_int,
        flags: ImPlotScatterFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotScatter_U64PtrU64Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU64,
        ys: *const ImU64,
        count: ::std::os::raw::c_int,
        flags: ImPlotScatterFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotScatterG(
        label_id: *const ::std::os::raw::c_char,
        getter: ImPlotPoint_getter,
        data: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        flags: ImPlotScatterFlags,
    );
}
extern "C" {
    pub fn ImPlot_PlotStairs_FloatPtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const f32,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotStairsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotStairs_doublePtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const f64,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotStairsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotStairs_S8PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS8,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotStairsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotStairs_U8PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU8,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotStairsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotStairs_S16PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS16,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotStairsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotStairs_U16PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU16,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotStairsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotStairs_S32PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS32,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotStairsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotStairs_U32PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU32,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotStairsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotStairs_S64PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS64,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotStairsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotStairs_U64PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU64,
        count: ::std::os::raw::c_int,
        xscale: f64,
        xstart: f64,
        flags: ImPlotStairsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotStairs_FloatPtrFloatPtr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const f32,
        ys: *const f32,
        count: ::std::os::raw::c_int,
        flags: ImPlotStairsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotStairs_doublePtrdoublePtr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const f64,
        ys: *const f64,
        count: ::std::os::raw::c_int,
        flags: ImPlotStairsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotStairs_S8PtrS8Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS8,
        ys: *const ImS8,
        count: ::std::os::raw::c_int,
        flags: ImPlotStairsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotStairs_U8PtrU8Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU8,
        ys: *const ImU8,
        count: ::std::os::raw::c_int,
        flags: ImPlotStairsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotStairs_S16PtrS16Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS16,
        ys: *const ImS16,
        count: ::std::os::raw::c_int,
        flags: ImPlotStairsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotStairs_U16PtrU16Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU16,
        ys: *const ImU16,
        count: ::std::os::raw::c_int,
        flags: ImPlotStairsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotStairs_S32PtrS32Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS32,
        ys: *const ImS32,
        count: ::std::os::raw::c_int,
        flags: ImPlotStairsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotStairs_U32PtrU32Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU32,
        ys: *const ImU32,
        count: ::std::os::raw::c_int,
        flags: ImPlotStairsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotStairs_S64PtrS64Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS64,
        ys: *const ImS64,
        count: ::std::os::raw::c_int,
        flags: ImPlotStairsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotStairs_U64PtrU64Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU64,
        ys: *const ImU64,
        count: ::std::os::raw::c_int,
        flags: ImPlotStairsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotStairsG(
        label_id: *const ::std::os::raw::c_char,
        getter: ImPlotPoint_getter,
        data: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        flags: ImPlotStairsFlags,
    );
}
extern "C" {
    pub fn ImPlot_PlotShaded_FloatPtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const f32,
        count: ::std::os::raw::c_int,
        yref: f64,
        xscale: f64,
        xstart: f64,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotShaded_doublePtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const f64,
        count: ::std::os::raw::c_int,
        yref: f64,
        xscale: f64,
        xstart: f64,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotShaded_S8PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS8,
        count: ::std::os::raw::c_int,
        yref: f64,
        xscale: f64,
        xstart: f64,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotShaded_U8PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU8,
        count: ::std::os::raw::c_int,
        yref: f64,
        xscale: f64,
        xstart: f64,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotShaded_S16PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS16,
        count: ::std::os::raw::c_int,
        yref: f64,
        xscale: f64,
        xstart: f64,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotShaded_U16PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU16,
        count: ::std::os::raw::c_int,
        yref: f64,
        xscale: f64,
        xstart: f64,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotShaded_S32PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS32,
        count: ::std::os::raw::c_int,
        yref: f64,
        xscale: f64,
        xstart: f64,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotShaded_U32PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU32,
        count: ::std::os::raw::c_int,
        yref: f64,
        xscale: f64,
        xstart: f64,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotShaded_S64PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS64,
        count: ::std::os::raw::c_int,
        yref: f64,
        xscale: f64,
        xstart: f64,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotShaded_U64PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU64,
        count: ::std::os::raw::c_int,
        yref: f64,
        xscale: f64,
        xstart: f64,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotShaded_FloatPtrFloatPtrInt(
        label_id: *const ::std::os::raw::c_char,
        xs: *const f32,
        ys: *const f32,
        count: ::std::os::raw::c_int,
        yref: f64,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotShaded_doublePtrdoublePtrInt(
        label_id: *const ::std::os::raw::c_char,
        xs: *const f64,
        ys: *const f64,
        count: ::std::os::raw::c_int,
        yref: f64,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotShaded_S8PtrS8PtrInt(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS8,
        ys: *const ImS8,
        count: ::std::os::raw::c_int,
        yref: f64,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotShaded_U8PtrU8PtrInt(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU8,
        ys: *const ImU8,
        count: ::std::os::raw::c_int,
        yref: f64,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotShaded_S16PtrS16PtrInt(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS16,
        ys: *const ImS16,
        count: ::std::os::raw::c_int,
        yref: f64,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotShaded_U16PtrU16PtrInt(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU16,
        ys: *const ImU16,
        count: ::std::os::raw::c_int,
        yref: f64,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotShaded_S32PtrS32PtrInt(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS32,
        ys: *const ImS32,
        count: ::std::os::raw::c_int,
        yref: f64,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotShaded_U32PtrU32PtrInt(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU32,
        ys: *const ImU32,
        count: ::std::os::raw::c_int,
        yref: f64,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotShaded_S64PtrS64PtrInt(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS64,
        ys: *const ImS64,
        count: ::std::os::raw::c_int,
        yref: f64,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotShaded_U64PtrU64PtrInt(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU64,
        ys: *const ImU64,
        count: ::std::os::raw::c_int,
        yref: f64,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotShaded_FloatPtrFloatPtrFloatPtr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const f32,
        ys1: *const f32,
        ys2: *const f32,
        count: ::std::os::raw::c_int,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotShaded_doublePtrdoublePtrdoublePtr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const f64,
        ys1: *const f64,
        ys2: *const f64,
        count: ::std::os::raw::c_int,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotShaded_S8PtrS8PtrS8Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS8,
        ys1: *const ImS8,
        ys2: *const ImS8,
        count: ::std::os::raw::c_int,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotShaded_U8PtrU8PtrU8Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU8,
        ys1: *const ImU8,
        ys2: *const ImU8,
        count: ::std::os::raw::c_int,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotShaded_S16PtrS16PtrS16Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS16,
        ys1: *const ImS16,
        ys2: *const ImS16,
        count: ::std::os::raw::c_int,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotShaded_U16PtrU16PtrU16Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU16,
        ys1: *const ImU16,
        ys2: *const ImU16,
        count: ::std::os::raw::c_int,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotShaded_S32PtrS32PtrS32Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS32,
        ys1: *const ImS32,
        ys2: *const ImS32,
        count: ::std::os::raw::c_int,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotShaded_U32PtrU32PtrU32Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU32,
        ys1: *const ImU32,
        ys2: *const ImU32,
        count: ::std::os::raw::c_int,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotShaded_S64PtrS64PtrS64Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS64,
        ys1: *const ImS64,
        ys2: *const ImS64,
        count: ::std::os::raw::c_int,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotShaded_U64PtrU64PtrU64Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU64,
        ys1: *const ImU64,
        ys2: *const ImU64,
        count: ::std::os::raw::c_int,
        flags: ImPlotShadedFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotShadedG(
        label_id: *const ::std::os::raw::c_char,
        getter1: ImPlotPoint_getter,
        data1: *mut ::std::os::raw::c_void,
        getter2: ImPlotPoint_getter,
        data2: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        flags: ImPlotShadedFlags,
    );
}
extern "C" {
    pub fn ImPlot_PlotBars_FloatPtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const f32,
        count: ::std::os::raw::c_int,
        bar_size: f64,
        shift: f64,
        flags: ImPlotBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotBars_doublePtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const f64,
        count: ::std::os::raw::c_int,
        bar_size: f64,
        shift: f64,
        flags: ImPlotBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotBars_S8PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS8,
        count: ::std::os::raw::c_int,
        bar_size: f64,
        shift: f64,
        flags: ImPlotBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotBars_U8PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU8,
        count: ::std::os::raw::c_int,
        bar_size: f64,
        shift: f64,
        flags: ImPlotBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotBars_S16PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS16,
        count: ::std::os::raw::c_int,
        bar_size: f64,
        shift: f64,
        flags: ImPlotBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotBars_U16PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU16,
        count: ::std::os::raw::c_int,
        bar_size: f64,
        shift: f64,
        flags: ImPlotBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotBars_S32PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS32,
        count: ::std::os::raw::c_int,
        bar_size: f64,
        shift: f64,
        flags: ImPlotBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotBars_U32PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU32,
        count: ::std::os::raw::c_int,
        bar_size: f64,
        shift: f64,
        flags: ImPlotBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotBars_S64PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS64,
        count: ::std::os::raw::c_int,
        bar_size: f64,
        shift: f64,
        flags: ImPlotBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotBars_U64PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU64,
        count: ::std::os::raw::c_int,
        bar_size: f64,
        shift: f64,
        flags: ImPlotBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotBars_FloatPtrFloatPtr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const f32,
        ys: *const f32,
        count: ::std::os::raw::c_int,
        bar_size: f64,
        flags: ImPlotBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotBars_doublePtrdoublePtr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const f64,
        ys: *const f64,
        count: ::std::os::raw::c_int,
        bar_size: f64,
        flags: ImPlotBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotBars_S8PtrS8Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS8,
        ys: *const ImS8,
        count: ::std::os::raw::c_int,
        bar_size: f64,
        flags: ImPlotBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotBars_U8PtrU8Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU8,
        ys: *const ImU8,
        count: ::std::os::raw::c_int,
        bar_size: f64,
        flags: ImPlotBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotBars_S16PtrS16Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS16,
        ys: *const ImS16,
        count: ::std::os::raw::c_int,
        bar_size: f64,
        flags: ImPlotBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotBars_U16PtrU16Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU16,
        ys: *const ImU16,
        count: ::std::os::raw::c_int,
        bar_size: f64,
        flags: ImPlotBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotBars_S32PtrS32Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS32,
        ys: *const ImS32,
        count: ::std::os::raw::c_int,
        bar_size: f64,
        flags: ImPlotBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotBars_U32PtrU32Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU32,
        ys: *const ImU32,
        count: ::std::os::raw::c_int,
        bar_size: f64,
        flags: ImPlotBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotBars_S64PtrS64Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS64,
        ys: *const ImS64,
        count: ::std::os::raw::c_int,
        bar_size: f64,
        flags: ImPlotBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotBars_U64PtrU64Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU64,
        ys: *const ImU64,
        count: ::std::os::raw::c_int,
        bar_size: f64,
        flags: ImPlotBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotBarsG(
        label_id: *const ::std::os::raw::c_char,
        getter: ImPlotPoint_getter,
        data: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        bar_size: f64,
        flags: ImPlotBarsFlags,
    );
}
extern "C" {
    pub fn ImPlot_PlotBarGroups_FloatPtr(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const f32,
        item_count: ::std::os::raw::c_int,
        group_count: ::std::os::raw::c_int,
        group_size: f64,
        shift: f64,
        flags: ImPlotBarGroupsFlags,
    );
}
extern "C" {
    pub fn ImPlot_PlotBarGroups_doublePtr(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const f64,
        item_count: ::std::os::raw::c_int,
        group_count: ::std::os::raw::c_int,
        group_size: f64,
        shift: f64,
        flags: ImPlotBarGroupsFlags,
    );
}
extern "C" {
    pub fn ImPlot_PlotBarGroups_S8Ptr(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const ImS8,
        item_count: ::std::os::raw::c_int,
        group_count: ::std::os::raw::c_int,
        group_size: f64,
        shift: f64,
        flags: ImPlotBarGroupsFlags,
    );
}
extern "C" {
    pub fn ImPlot_PlotBarGroups_U8Ptr(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const ImU8,
        item_count: ::std::os::raw::c_int,
        group_count: ::std::os::raw::c_int,
        group_size: f64,
        shift: f64,
        flags: ImPlotBarGroupsFlags,
    );
}
extern "C" {
    pub fn ImPlot_PlotBarGroups_S16Ptr(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const ImS16,
        item_count: ::std::os::raw::c_int,
        group_count: ::std::os::raw::c_int,
        group_size: f64,
        shift: f64,
        flags: ImPlotBarGroupsFlags,
    );
}
extern "C" {
    pub fn ImPlot_PlotBarGroups_U16Ptr(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const ImU16,
        item_count: ::std::os::raw::c_int,
        group_count: ::std::os::raw::c_int,
        group_size: f64,
        shift: f64,
        flags: ImPlotBarGroupsFlags,
    );
}
extern "C" {
    pub fn ImPlot_PlotBarGroups_S32Ptr(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const ImS32,
        item_count: ::std::os::raw::c_int,
        group_count: ::std::os::raw::c_int,
        group_size: f64,
        shift: f64,
        flags: ImPlotBarGroupsFlags,
    );
}
extern "C" {
    pub fn ImPlot_PlotBarGroups_U32Ptr(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const ImU32,
        item_count: ::std::os::raw::c_int,
        group_count: ::std::os::raw::c_int,
        group_size: f64,
        shift: f64,
        flags: ImPlotBarGroupsFlags,
    );
}
extern "C" {
    pub fn ImPlot_PlotBarGroups_S64Ptr(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const ImS64,
        item_count: ::std::os::raw::c_int,
        group_count: ::std::os::raw::c_int,
        group_size: f64,
        shift: f64,
        flags: ImPlotBarGroupsFlags,
    );
}
extern "C" {
    pub fn ImPlot_PlotBarGroups_U64Ptr(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const ImU64,
        item_count: ::std::os::raw::c_int,
        group_count: ::std::os::raw::c_int,
        group_size: f64,
        shift: f64,
        flags: ImPlotBarGroupsFlags,
    );
}
extern "C" {
    pub fn ImPlot_PlotErrorBars_FloatPtrFloatPtrFloatPtrInt(
        label_id: *const ::std::os::raw::c_char,
        xs: *const f32,
        ys: *const f32,
        err: *const f32,
        count: ::std::os::raw::c_int,
        flags: ImPlotErrorBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotErrorBars_doublePtrdoublePtrdoublePtrInt(
        label_id: *const ::std::os::raw::c_char,
        xs: *const f64,
        ys: *const f64,
        err: *const f64,
        count: ::std::os::raw::c_int,
        flags: ImPlotErrorBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotErrorBars_S8PtrS8PtrS8PtrInt(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS8,
        ys: *const ImS8,
        err: *const ImS8,
        count: ::std::os::raw::c_int,
        flags: ImPlotErrorBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotErrorBars_U8PtrU8PtrU8PtrInt(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU8,
        ys: *const ImU8,
        err: *const ImU8,
        count: ::std::os::raw::c_int,
        flags: ImPlotErrorBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotErrorBars_S16PtrS16PtrS16PtrInt(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS16,
        ys: *const ImS16,
        err: *const ImS16,
        count: ::std::os::raw::c_int,
        flags: ImPlotErrorBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotErrorBars_U16PtrU16PtrU16PtrInt(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU16,
        ys: *const ImU16,
        err: *const ImU16,
        count: ::std::os::raw::c_int,
        flags: ImPlotErrorBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotErrorBars_S32PtrS32PtrS32PtrInt(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS32,
        ys: *const ImS32,
        err: *const ImS32,
        count: ::std::os::raw::c_int,
        flags: ImPlotErrorBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotErrorBars_U32PtrU32PtrU32PtrInt(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU32,
        ys: *const ImU32,
        err: *const ImU32,
        count: ::std::os::raw::c_int,
        flags: ImPlotErrorBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotErrorBars_S64PtrS64PtrS64PtrInt(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS64,
        ys: *const ImS64,
        err: *const ImS64,
        count: ::std::os::raw::c_int,
        flags: ImPlotErrorBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotErrorBars_U64PtrU64PtrU64PtrInt(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU64,
        ys: *const ImU64,
        err: *const ImU64,
        count: ::std::os::raw::c_int,
        flags: ImPlotErrorBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotErrorBars_FloatPtrFloatPtrFloatPtrFloatPtr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const f32,
        ys: *const f32,
        neg: *const f32,
        pos: *const f32,
        count: ::std::os::raw::c_int,
        flags: ImPlotErrorBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotErrorBars_doublePtrdoublePtrdoublePtrdoublePtr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const f64,
        ys: *const f64,
        neg: *const f64,
        pos: *const f64,
        count: ::std::os::raw::c_int,
        flags: ImPlotErrorBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotErrorBars_S8PtrS8PtrS8PtrS8Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS8,
        ys: *const ImS8,
        neg: *const ImS8,
        pos: *const ImS8,
        count: ::std::os::raw::c_int,
        flags: ImPlotErrorBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotErrorBars_U8PtrU8PtrU8PtrU8Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU8,
        ys: *const ImU8,
        neg: *const ImU8,
        pos: *const ImU8,
        count: ::std::os::raw::c_int,
        flags: ImPlotErrorBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotErrorBars_S16PtrS16PtrS16PtrS16Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS16,
        ys: *const ImS16,
        neg: *const ImS16,
        pos: *const ImS16,
        count: ::std::os::raw::c_int,
        flags: ImPlotErrorBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotErrorBars_U16PtrU16PtrU16PtrU16Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU16,
        ys: *const ImU16,
        neg: *const ImU16,
        pos: *const ImU16,
        count: ::std::os::raw::c_int,
        flags: ImPlotErrorBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotErrorBars_S32PtrS32PtrS32PtrS32Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS32,
        ys: *const ImS32,
        neg: *const ImS32,
        pos: *const ImS32,
        count: ::std::os::raw::c_int,
        flags: ImPlotErrorBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotErrorBars_U32PtrU32PtrU32PtrU32Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU32,
        ys: *const ImU32,
        neg: *const ImU32,
        pos: *const ImU32,
        count: ::std::os::raw::c_int,
        flags: ImPlotErrorBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotErrorBars_S64PtrS64PtrS64PtrS64Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS64,
        ys: *const ImS64,
        neg: *const ImS64,
        pos: *const ImS64,
        count: ::std::os::raw::c_int,
        flags: ImPlotErrorBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotErrorBars_U64PtrU64PtrU64PtrU64Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU64,
        ys: *const ImU64,
        neg: *const ImU64,
        pos: *const ImU64,
        count: ::std::os::raw::c_int,
        flags: ImPlotErrorBarsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotStems_FloatPtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const f32,
        count: ::std::os::raw::c_int,
        ref_: f64,
        scale: f64,
        start: f64,
        flags: ImPlotStemsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotStems_doublePtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const f64,
        count: ::std::os::raw::c_int,
        ref_: f64,
        scale: f64,
        start: f64,
        flags: ImPlotStemsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotStems_S8PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS8,
        count: ::std::os::raw::c_int,
        ref_: f64,
        scale: f64,
        start: f64,
        flags: ImPlotStemsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotStems_U8PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU8,
        count: ::std::os::raw::c_int,
        ref_: f64,
        scale: f64,
        start: f64,
        flags: ImPlotStemsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotStems_S16PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS16,
        count: ::std::os::raw::c_int,
        ref_: f64,
        scale: f64,
        start: f64,
        flags: ImPlotStemsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotStems_U16PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU16,
        count: ::std::os::raw::c_int,
        ref_: f64,
        scale: f64,
        start: f64,
        flags: ImPlotStemsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotStems_S32PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS32,
        count: ::std::os::raw::c_int,
        ref_: f64,
        scale: f64,
        start: f64,
        flags: ImPlotStemsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotStems_U32PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU32,
        count: ::std::os::raw::c_int,
        ref_: f64,
        scale: f64,
        start: f64,
        flags: ImPlotStemsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotStems_S64PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS64,
        count: ::std::os::raw::c_int,
        ref_: f64,
        scale: f64,
        start: f64,
        flags: ImPlotStemsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotStems_U64PtrInt(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU64,
        count: ::std::os::raw::c_int,
        ref_: f64,
        scale: f64,
        start: f64,
        flags: ImPlotStemsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotStems_FloatPtrFloatPtr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const f32,
        ys: *const f32,
        count: ::std::os::raw::c_int,
        ref_: f64,
        flags: ImPlotStemsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotStems_doublePtrdoublePtr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const f64,
        ys: *const f64,
        count: ::std::os::raw::c_int,
        ref_: f64,
        flags: ImPlotStemsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotStems_S8PtrS8Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS8,
        ys: *const ImS8,
        count: ::std::os::raw::c_int,
        ref_: f64,
        flags: ImPlotStemsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotStems_U8PtrU8Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU8,
        ys: *const ImU8,
        count: ::std::os::raw::c_int,
        ref_: f64,
        flags: ImPlotStemsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotStems_S16PtrS16Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS16,
        ys: *const ImS16,
        count: ::std::os::raw::c_int,
        ref_: f64,
        flags: ImPlotStemsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotStems_U16PtrU16Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU16,
        ys: *const ImU16,
        count: ::std::os::raw::c_int,
        ref_: f64,
        flags: ImPlotStemsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotStems_S32PtrS32Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS32,
        ys: *const ImS32,
        count: ::std::os::raw::c_int,
        ref_: f64,
        flags: ImPlotStemsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotStems_U32PtrU32Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU32,
        ys: *const ImU32,
        count: ::std::os::raw::c_int,
        ref_: f64,
        flags: ImPlotStemsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotStems_S64PtrS64Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS64,
        ys: *const ImS64,
        count: ::std::os::raw::c_int,
        ref_: f64,
        flags: ImPlotStemsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotStems_U64PtrU64Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU64,
        ys: *const ImU64,
        count: ::std::os::raw::c_int,
        ref_: f64,
        flags: ImPlotStemsFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotInfLines_FloatPtr(
        label_id: *const ::std::os::raw::c_char,
        values: *const f32,
        count: ::std::os::raw::c_int,
        flags: ImPlotInfLinesFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotInfLines_doublePtr(
        label_id: *const ::std::os::raw::c_char,
        values: *const f64,
        count: ::std::os::raw::c_int,
        flags: ImPlotInfLinesFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotInfLines_S8Ptr(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS8,
        count: ::std::os::raw::c_int,
        flags: ImPlotInfLinesFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotInfLines_U8Ptr(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU8,
        count: ::std::os::raw::c_int,
        flags: ImPlotInfLinesFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotInfLines_S16Ptr(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS16,
        count: ::std::os::raw::c_int,
        flags: ImPlotInfLinesFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotInfLines_U16Ptr(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU16,
        count: ::std::os::raw::c_int,
        flags: ImPlotInfLinesFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotInfLines_S32Ptr(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS32,
        count: ::std::os::raw::c_int,
        flags: ImPlotInfLinesFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotInfLines_U32Ptr(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU32,
        count: ::std::os::raw::c_int,
        flags: ImPlotInfLinesFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotInfLines_S64Ptr(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS64,
        count: ::std::os::raw::c_int,
        flags: ImPlotInfLinesFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotInfLines_U64Ptr(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU64,
        count: ::std::os::raw::c_int,
        flags: ImPlotInfLinesFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotPieChart_FloatPtrPlotFormatter(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const f32,
        count: ::std::os::raw::c_int,
        x: f64,
        y: f64,
        radius: f64,
        fmt: ImPlotFormatter,
        fmt_data: *mut ::std::os::raw::c_void,
        angle0: f64,
        flags: ImPlotPieChartFlags,
    );
}
extern "C" {
    pub fn ImPlot_PlotPieChart_doublePtrPlotFormatter(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const f64,
        count: ::std::os::raw::c_int,
        x: f64,
        y: f64,
        radius: f64,
        fmt: ImPlotFormatter,
        fmt_data: *mut ::std::os::raw::c_void,
        angle0: f64,
        flags: ImPlotPieChartFlags,
    );
}
extern "C" {
    pub fn ImPlot_PlotPieChart_S8PtrPlotFormatter(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const ImS8,
        count: ::std::os::raw::c_int,
        x: f64,
        y: f64,
        radius: f64,
        fmt: ImPlotFormatter,
        fmt_data: *mut ::std::os::raw::c_void,
        angle0: f64,
        flags: ImPlotPieChartFlags,
    );
}
extern "C" {
    pub fn ImPlot_PlotPieChart_U8PtrPlotFormatter(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const ImU8,
        count: ::std::os::raw::c_int,
        x: f64,
        y: f64,
        radius: f64,
        fmt: ImPlotFormatter,
        fmt_data: *mut ::std::os::raw::c_void,
        angle0: f64,
        flags: ImPlotPieChartFlags,
    );
}
extern "C" {
    pub fn ImPlot_PlotPieChart_S16PtrPlotFormatter(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const ImS16,
        count: ::std::os::raw::c_int,
        x: f64,
        y: f64,
        radius: f64,
        fmt: ImPlotFormatter,
        fmt_data: *mut ::std::os::raw::c_void,
        angle0: f64,
        flags: ImPlotPieChartFlags,
    );
}
extern "C" {
    pub fn ImPlot_PlotPieChart_U16PtrPlotFormatter(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const ImU16,
        count: ::std::os::raw::c_int,
        x: f64,
        y: f64,
        radius: f64,
        fmt: ImPlotFormatter,
        fmt_data: *mut ::std::os::raw::c_void,
        angle0: f64,
        flags: ImPlotPieChartFlags,
    );
}
extern "C" {
    pub fn ImPlot_PlotPieChart_S32PtrPlotFormatter(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const ImS32,
        count: ::std::os::raw::c_int,
        x: f64,
        y: f64,
        radius: f64,
        fmt: ImPlotFormatter,
        fmt_data: *mut ::std::os::raw::c_void,
        angle0: f64,
        flags: ImPlotPieChartFlags,
    );
}
extern "C" {
    pub fn ImPlot_PlotPieChart_U32PtrPlotFormatter(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const ImU32,
        count: ::std::os::raw::c_int,
        x: f64,
        y: f64,
        radius: f64,
        fmt: ImPlotFormatter,
        fmt_data: *mut ::std::os::raw::c_void,
        angle0: f64,
        flags: ImPlotPieChartFlags,
    );
}
extern "C" {
    pub fn ImPlot_PlotPieChart_S64PtrPlotFormatter(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const ImS64,
        count: ::std::os::raw::c_int,
        x: f64,
        y: f64,
        radius: f64,
        fmt: ImPlotFormatter,
        fmt_data: *mut ::std::os::raw::c_void,
        angle0: f64,
        flags: ImPlotPieChartFlags,
    );
}
extern "C" {
    pub fn ImPlot_PlotPieChart_U64PtrPlotFormatter(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const ImU64,
        count: ::std::os::raw::c_int,
        x: f64,
        y: f64,
        radius: f64,
        fmt: ImPlotFormatter,
        fmt_data: *mut ::std::os::raw::c_void,
        angle0: f64,
        flags: ImPlotPieChartFlags,
    );
}
extern "C" {
    pub fn ImPlot_PlotPieChart_FloatPtrStr(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const f32,
        count: ::std::os::raw::c_int,
        x: f64,
        y: f64,
        radius: f64,
        label_fmt: *const ::std::os::raw::c_char,
        angle0: f64,
        flags: ImPlotPieChartFlags,
    );
}
extern "C" {
    pub fn ImPlot_PlotPieChart_doublePtrStr(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const f64,
        count: ::std::os::raw::c_int,
        x: f64,
        y: f64,
        radius: f64,
        label_fmt: *const ::std::os::raw::c_char,
        angle0: f64,
        flags: ImPlotPieChartFlags,
    );
}
extern "C" {
    pub fn ImPlot_PlotPieChart_S8PtrStr(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const ImS8,
        count: ::std::os::raw::c_int,
        x: f64,
        y: f64,
        radius: f64,
        label_fmt: *const ::std::os::raw::c_char,
        angle0: f64,
        flags: ImPlotPieChartFlags,
    );
}
extern "C" {
    pub fn ImPlot_PlotPieChart_U8PtrStr(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const ImU8,
        count: ::std::os::raw::c_int,
        x: f64,
        y: f64,
        radius: f64,
        label_fmt: *const ::std::os::raw::c_char,
        angle0: f64,
        flags: ImPlotPieChartFlags,
    );
}
extern "C" {
    pub fn ImPlot_PlotPieChart_S16PtrStr(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const ImS16,
        count: ::std::os::raw::c_int,
        x: f64,
        y: f64,
        radius: f64,
        label_fmt: *const ::std::os::raw::c_char,
        angle0: f64,
        flags: ImPlotPieChartFlags,
    );
}
extern "C" {
    pub fn ImPlot_PlotPieChart_U16PtrStr(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const ImU16,
        count: ::std::os::raw::c_int,
        x: f64,
        y: f64,
        radius: f64,
        label_fmt: *const ::std::os::raw::c_char,
        angle0: f64,
        flags: ImPlotPieChartFlags,
    );
}
extern "C" {
    pub fn ImPlot_PlotPieChart_S32PtrStr(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const ImS32,
        count: ::std::os::raw::c_int,
        x: f64,
        y: f64,
        radius: f64,
        label_fmt: *const ::std::os::raw::c_char,
        angle0: f64,
        flags: ImPlotPieChartFlags,
    );
}
extern "C" {
    pub fn ImPlot_PlotPieChart_U32PtrStr(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const ImU32,
        count: ::std::os::raw::c_int,
        x: f64,
        y: f64,
        radius: f64,
        label_fmt: *const ::std::os::raw::c_char,
        angle0: f64,
        flags: ImPlotPieChartFlags,
    );
}
extern "C" {
    pub fn ImPlot_PlotPieChart_S64PtrStr(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const ImS64,
        count: ::std::os::raw::c_int,
        x: f64,
        y: f64,
        radius: f64,
        label_fmt: *const ::std::os::raw::c_char,
        angle0: f64,
        flags: ImPlotPieChartFlags,
    );
}
extern "C" {
    pub fn ImPlot_PlotPieChart_U64PtrStr(
        label_ids: *const *const ::std::os::raw::c_char,
        values: *const ImU64,
        count: ::std::os::raw::c_int,
        x: f64,
        y: f64,
        radius: f64,
        label_fmt: *const ::std::os::raw::c_char,
        angle0: f64,
        flags: ImPlotPieChartFlags,
    );
}
extern "C" {
    pub fn ImPlot_PlotHeatmap_FloatPtr(
        label_id: *const ::std::os::raw::c_char,
        values: *const f32,
        rows: ::std::os::raw::c_int,
        cols: ::std::os::raw::c_int,
        scale_min: f64,
        scale_max: f64,
        label_fmt: *const ::std::os::raw::c_char,
        bounds_min: ImPlotPoint,
        bounds_max: ImPlotPoint,
        flags: ImPlotHeatmapFlags,
    );
}
extern "C" {
    pub fn ImPlot_PlotHeatmap_doublePtr(
        label_id: *const ::std::os::raw::c_char,
        values: *const f64,
        rows: ::std::os::raw::c_int,
        cols: ::std::os::raw::c_int,
        scale_min: f64,
        scale_max: f64,
        label_fmt: *const ::std::os::raw::c_char,
        bounds_min: ImPlotPoint,
        bounds_max: ImPlotPoint,
        flags: ImPlotHeatmapFlags,
    );
}
extern "C" {
    pub fn ImPlot_PlotHeatmap_S8Ptr(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS8,
        rows: ::std::os::raw::c_int,
        cols: ::std::os::raw::c_int,
        scale_min: f64,
        scale_max: f64,
        label_fmt: *const ::std::os::raw::c_char,
        bounds_min: ImPlotPoint,
        bounds_max: ImPlotPoint,
        flags: ImPlotHeatmapFlags,
    );
}
extern "C" {
    pub fn ImPlot_PlotHeatmap_U8Ptr(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU8,
        rows: ::std::os::raw::c_int,
        cols: ::std::os::raw::c_int,
        scale_min: f64,
        scale_max: f64,
        label_fmt: *const ::std::os::raw::c_char,
        bounds_min: ImPlotPoint,
        bounds_max: ImPlotPoint,
        flags: ImPlotHeatmapFlags,
    );
}
extern "C" {
    pub fn ImPlot_PlotHeatmap_S16Ptr(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS16,
        rows: ::std::os::raw::c_int,
        cols: ::std::os::raw::c_int,
        scale_min: f64,
        scale_max: f64,
        label_fmt: *const ::std::os::raw::c_char,
        bounds_min: ImPlotPoint,
        bounds_max: ImPlotPoint,
        flags: ImPlotHeatmapFlags,
    );
}
extern "C" {
    pub fn ImPlot_PlotHeatmap_U16Ptr(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU16,
        rows: ::std::os::raw::c_int,
        cols: ::std::os::raw::c_int,
        scale_min: f64,
        scale_max: f64,
        label_fmt: *const ::std::os::raw::c_char,
        bounds_min: ImPlotPoint,
        bounds_max: ImPlotPoint,
        flags: ImPlotHeatmapFlags,
    );
}
extern "C" {
    pub fn ImPlot_PlotHeatmap_S32Ptr(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS32,
        rows: ::std::os::raw::c_int,
        cols: ::std::os::raw::c_int,
        scale_min: f64,
        scale_max: f64,
        label_fmt: *const ::std::os::raw::c_char,
        bounds_min: ImPlotPoint,
        bounds_max: ImPlotPoint,
        flags: ImPlotHeatmapFlags,
    );
}
extern "C" {
    pub fn ImPlot_PlotHeatmap_U32Ptr(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU32,
        rows: ::std::os::raw::c_int,
        cols: ::std::os::raw::c_int,
        scale_min: f64,
        scale_max: f64,
        label_fmt: *const ::std::os::raw::c_char,
        bounds_min: ImPlotPoint,
        bounds_max: ImPlotPoint,
        flags: ImPlotHeatmapFlags,
    );
}
extern "C" {
    pub fn ImPlot_PlotHeatmap_S64Ptr(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS64,
        rows: ::std::os::raw::c_int,
        cols: ::std::os::raw::c_int,
        scale_min: f64,
        scale_max: f64,
        label_fmt: *const ::std::os::raw::c_char,
        bounds_min: ImPlotPoint,
        bounds_max: ImPlotPoint,
        flags: ImPlotHeatmapFlags,
    );
}
extern "C" {
    pub fn ImPlot_PlotHeatmap_U64Ptr(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU64,
        rows: ::std::os::raw::c_int,
        cols: ::std::os::raw::c_int,
        scale_min: f64,
        scale_max: f64,
        label_fmt: *const ::std::os::raw::c_char,
        bounds_min: ImPlotPoint,
        bounds_max: ImPlotPoint,
        flags: ImPlotHeatmapFlags,
    );
}
extern "C" {
    pub fn ImPlot_PlotHistogram_FloatPtr(
        label_id: *const ::std::os::raw::c_char,
        values: *const f32,
        count: ::std::os::raw::c_int,
        bins: ::std::os::raw::c_int,
        bar_scale: f64,
        range: ImPlotRange,
        flags: ImPlotHistogramFlags,
    ) -> f64;
}
extern "C" {
    pub fn ImPlot_PlotHistogram_doublePtr(
        label_id: *const ::std::os::raw::c_char,
        values: *const f64,
        count: ::std::os::raw::c_int,
        bins: ::std::os::raw::c_int,
        bar_scale: f64,
        range: ImPlotRange,
        flags: ImPlotHistogramFlags,
    ) -> f64;
}
extern "C" {
    pub fn ImPlot_PlotHistogram_S8Ptr(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS8,
        count: ::std::os::raw::c_int,
        bins: ::std::os::raw::c_int,
        bar_scale: f64,
        range: ImPlotRange,
        flags: ImPlotHistogramFlags,
    ) -> f64;
}
extern "C" {
    pub fn ImPlot_PlotHistogram_U8Ptr(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU8,
        count: ::std::os::raw::c_int,
        bins: ::std::os::raw::c_int,
        bar_scale: f64,
        range: ImPlotRange,
        flags: ImPlotHistogramFlags,
    ) -> f64;
}
extern "C" {
    pub fn ImPlot_PlotHistogram_S16Ptr(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS16,
        count: ::std::os::raw::c_int,
        bins: ::std::os::raw::c_int,
        bar_scale: f64,
        range: ImPlotRange,
        flags: ImPlotHistogramFlags,
    ) -> f64;
}
extern "C" {
    pub fn ImPlot_PlotHistogram_U16Ptr(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU16,
        count: ::std::os::raw::c_int,
        bins: ::std::os::raw::c_int,
        bar_scale: f64,
        range: ImPlotRange,
        flags: ImPlotHistogramFlags,
    ) -> f64;
}
extern "C" {
    pub fn ImPlot_PlotHistogram_S32Ptr(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS32,
        count: ::std::os::raw::c_int,
        bins: ::std::os::raw::c_int,
        bar_scale: f64,
        range: ImPlotRange,
        flags: ImPlotHistogramFlags,
    ) -> f64;
}
extern "C" {
    pub fn ImPlot_PlotHistogram_U32Ptr(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU32,
        count: ::std::os::raw::c_int,
        bins: ::std::os::raw::c_int,
        bar_scale: f64,
        range: ImPlotRange,
        flags: ImPlotHistogramFlags,
    ) -> f64;
}
extern "C" {
    pub fn ImPlot_PlotHistogram_S64Ptr(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImS64,
        count: ::std::os::raw::c_int,
        bins: ::std::os::raw::c_int,
        bar_scale: f64,
        range: ImPlotRange,
        flags: ImPlotHistogramFlags,
    ) -> f64;
}
extern "C" {
    pub fn ImPlot_PlotHistogram_U64Ptr(
        label_id: *const ::std::os::raw::c_char,
        values: *const ImU64,
        count: ::std::os::raw::c_int,
        bins: ::std::os::raw::c_int,
        bar_scale: f64,
        range: ImPlotRange,
        flags: ImPlotHistogramFlags,
    ) -> f64;
}
extern "C" {
    pub fn ImPlot_PlotHistogram2D_FloatPtr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const f32,
        ys: *const f32,
        count: ::std::os::raw::c_int,
        x_bins: ::std::os::raw::c_int,
        y_bins: ::std::os::raw::c_int,
        range: ImPlotRect,
        flags: ImPlotHistogramFlags,
    ) -> f64;
}
extern "C" {
    pub fn ImPlot_PlotHistogram2D_doublePtr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const f64,
        ys: *const f64,
        count: ::std::os::raw::c_int,
        x_bins: ::std::os::raw::c_int,
        y_bins: ::std::os::raw::c_int,
        range: ImPlotRect,
        flags: ImPlotHistogramFlags,
    ) -> f64;
}
extern "C" {
    pub fn ImPlot_PlotHistogram2D_S8Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS8,
        ys: *const ImS8,
        count: ::std::os::raw::c_int,
        x_bins: ::std::os::raw::c_int,
        y_bins: ::std::os::raw::c_int,
        range: ImPlotRect,
        flags: ImPlotHistogramFlags,
    ) -> f64;
}
extern "C" {
    pub fn ImPlot_PlotHistogram2D_U8Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU8,
        ys: *const ImU8,
        count: ::std::os::raw::c_int,
        x_bins: ::std::os::raw::c_int,
        y_bins: ::std::os::raw::c_int,
        range: ImPlotRect,
        flags: ImPlotHistogramFlags,
    ) -> f64;
}
extern "C" {
    pub fn ImPlot_PlotHistogram2D_S16Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS16,
        ys: *const ImS16,
        count: ::std::os::raw::c_int,
        x_bins: ::std::os::raw::c_int,
        y_bins: ::std::os::raw::c_int,
        range: ImPlotRect,
        flags: ImPlotHistogramFlags,
    ) -> f64;
}
extern "C" {
    pub fn ImPlot_PlotHistogram2D_U16Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU16,
        ys: *const ImU16,
        count: ::std::os::raw::c_int,
        x_bins: ::std::os::raw::c_int,
        y_bins: ::std::os::raw::c_int,
        range: ImPlotRect,
        flags: ImPlotHistogramFlags,
    ) -> f64;
}
extern "C" {
    pub fn ImPlot_PlotHistogram2D_S32Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS32,
        ys: *const ImS32,
        count: ::std::os::raw::c_int,
        x_bins: ::std::os::raw::c_int,
        y_bins: ::std::os::raw::c_int,
        range: ImPlotRect,
        flags: ImPlotHistogramFlags,
    ) -> f64;
}
extern "C" {
    pub fn ImPlot_PlotHistogram2D_U32Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU32,
        ys: *const ImU32,
        count: ::std::os::raw::c_int,
        x_bins: ::std::os::raw::c_int,
        y_bins: ::std::os::raw::c_int,
        range: ImPlotRect,
        flags: ImPlotHistogramFlags,
    ) -> f64;
}
extern "C" {
    pub fn ImPlot_PlotHistogram2D_S64Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS64,
        ys: *const ImS64,
        count: ::std::os::raw::c_int,
        x_bins: ::std::os::raw::c_int,
        y_bins: ::std::os::raw::c_int,
        range: ImPlotRect,
        flags: ImPlotHistogramFlags,
    ) -> f64;
}
extern "C" {
    pub fn ImPlot_PlotHistogram2D_U64Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU64,
        ys: *const ImU64,
        count: ::std::os::raw::c_int,
        x_bins: ::std::os::raw::c_int,
        y_bins: ::std::os::raw::c_int,
        range: ImPlotRect,
        flags: ImPlotHistogramFlags,
    ) -> f64;
}
extern "C" {
    pub fn ImPlot_PlotDigital_FloatPtr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const f32,
        ys: *const f32,
        count: ::std::os::raw::c_int,
        flags: ImPlotDigitalFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotDigital_doublePtr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const f64,
        ys: *const f64,
        count: ::std::os::raw::c_int,
        flags: ImPlotDigitalFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotDigital_S8Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS8,
        ys: *const ImS8,
        count: ::std::os::raw::c_int,
        flags: ImPlotDigitalFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotDigital_U8Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU8,
        ys: *const ImU8,
        count: ::std::os::raw::c_int,
        flags: ImPlotDigitalFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotDigital_S16Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS16,
        ys: *const ImS16,
        count: ::std::os::raw::c_int,
        flags: ImPlotDigitalFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotDigital_U16Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU16,
        ys: *const ImU16,
        count: ::std::os::raw::c_int,
        flags: ImPlotDigitalFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotDigital_S32Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS32,
        ys: *const ImS32,
        count: ::std::os::raw::c_int,
        flags: ImPlotDigitalFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotDigital_U32Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU32,
        ys: *const ImU32,
        count: ::std::os::raw::c_int,
        flags: ImPlotDigitalFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotDigital_S64Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImS64,
        ys: *const ImS64,
        count: ::std::os::raw::c_int,
        flags: ImPlotDigitalFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotDigital_U64Ptr(
        label_id: *const ::std::os::raw::c_char,
        xs: *const ImU64,
        ys: *const ImU64,
        count: ::std::os::raw::c_int,
        flags: ImPlotDigitalFlags,
        offset: ::std::os::raw::c_int,
        stride: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_PlotDigitalG(
        label_id: *const ::std::os::raw::c_char,
        getter: ImPlotPoint_getter,
        data: *mut ::std::os::raw::c_void,
        count: ::std::os::raw::c_int,
        flags: ImPlotDigitalFlags,
    );
}
extern "C" {
    pub fn ImPlot_PlotImage(
        label_id: *const ::std::os::raw::c_char,
        user_texture_id: ImTextureID,
        bounds_min: ImPlotPoint,
        bounds_max: ImPlotPoint,
        uv0: ImVec2,
        uv1: ImVec2,
        tint_col: ImVec4,
        flags: ImPlotImageFlags,
    );
}
extern "C" {
    pub fn ImPlot_PlotText(
        text: *const ::std::os::raw::c_char,
        x: f64,
        y: f64,
        pix_offset: ImVec2,
        flags: ImPlotTextFlags,
    );
}
extern "C" {
    pub fn ImPlot_PlotDummy(label_id: *const ::std::os::raw::c_char, flags: ImPlotDummyFlags);
}
extern "C" {
    pub fn ImPlot_DragPoint(
        id: ::std::os::raw::c_int,
        x: *mut f64,
        y: *mut f64,
        col: ImVec4,
        size: f32,
        flags: ImPlotDragToolFlags,
        out_clicked: *mut bool,
        out_hovered: *mut bool,
        held: *mut bool,
    ) -> bool;
}
extern "C" {
    pub fn ImPlot_DragLineX(
        id: ::std::os::raw::c_int,
        x: *mut f64,
        col: ImVec4,
        thickness: f32,
        flags: ImPlotDragToolFlags,
        out_clicked: *mut bool,
        out_hovered: *mut bool,
        held: *mut bool,
    ) -> bool;
}
extern "C" {
    pub fn ImPlot_DragLineY(
        id: ::std::os::raw::c_int,
        y: *mut f64,
        col: ImVec4,
        thickness: f32,
        flags: ImPlotDragToolFlags,
        out_clicked: *mut bool,
        out_hovered: *mut bool,
        held: *mut bool,
    ) -> bool;
}
extern "C" {
    pub fn ImPlot_DragRect(
        id: ::std::os::raw::c_int,
        x1: *mut f64,
        y1: *mut f64,
        x2: *mut f64,
        y2: *mut f64,
        col: ImVec4,
        flags: ImPlotDragToolFlags,
        out_clicked: *mut bool,
        out_hovered: *mut bool,
        held: *mut bool,
    ) -> bool;
}
extern "C" {
    pub fn ImPlot_Annotation_Bool(
        x: f64,
        y: f64,
        col: ImVec4,
        pix_offset: ImVec2,
        clamp: bool,
        round: bool,
    );
}
extern "C" {
    pub fn ImPlot_Annotation_Str(
        x: f64,
        y: f64,
        col: ImVec4,
        pix_offset: ImVec2,
        clamp: bool,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn ImPlot_TagX_Bool(x: f64, col: ImVec4, round: bool);
}
extern "C" {
    pub fn ImPlot_TagX_Str(x: f64, col: ImVec4, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn ImPlot_TagY_Bool(y: f64, col: ImVec4, round: bool);
}
extern "C" {
    pub fn ImPlot_TagY_Str(y: f64, col: ImVec4, fmt: *const ::std::os::raw::c_char, ...);
}
extern "C" {
    pub fn ImPlot_SetAxis(axis: ImAxis);
}
extern "C" {
    pub fn ImPlot_SetAxes(x_axis: ImAxis, y_axis: ImAxis);
}
extern "C" {
    pub fn ImPlot_PixelsToPlot_Vec2(
        pOut: *mut ImPlotPoint,
        pix: ImVec2,
        x_axis: ImAxis,
        y_axis: ImAxis,
    );
}
extern "C" {
    pub fn ImPlot_PixelsToPlot_Float(
        pOut: *mut ImPlotPoint,
        x: f32,
        y: f32,
        x_axis: ImAxis,
        y_axis: ImAxis,
    );
}
extern "C" {
    pub fn ImPlot_PlotToPixels_PlotPoInt(
        pOut: *mut ImVec2,
        plt: ImPlotPoint,
        x_axis: ImAxis,
        y_axis: ImAxis,
    );
}
extern "C" {
    pub fn ImPlot_PlotToPixels_double(
        pOut: *mut ImVec2,
        x: f64,
        y: f64,
        x_axis: ImAxis,
        y_axis: ImAxis,
    );
}
extern "C" {
    pub fn ImPlot_GetPlotPos(pOut: *mut ImVec2);
}
extern "C" {
    pub fn ImPlot_GetPlotSize(pOut: *mut ImVec2);
}
extern "C" {
    pub fn ImPlot_GetPlotMousePos(pOut: *mut ImPlotPoint, x_axis: ImAxis, y_axis: ImAxis);
}
extern "C" {
    pub fn ImPlot_GetPlotLimits(pOut: *mut ImPlotRect, x_axis: ImAxis, y_axis: ImAxis);
}
extern "C" {
    pub fn ImPlot_IsPlotHovered() -> bool;
}
extern "C" {
    pub fn ImPlot_IsAxisHovered(axis: ImAxis) -> bool;
}
extern "C" {
    pub fn ImPlot_IsSubplotsHovered() -> bool;
}
extern "C" {
    pub fn ImPlot_IsPlotSelected() -> bool;
}
extern "C" {
    pub fn ImPlot_GetPlotSelection(pOut: *mut ImPlotRect, x_axis: ImAxis, y_axis: ImAxis);
}
extern "C" {
    pub fn ImPlot_CancelPlotSelection();
}
extern "C" {
    pub fn ImPlot_HideNextItem(hidden: bool, cond: ImPlotCond);
}
extern "C" {
    pub fn ImPlot_BeginAlignedPlots(
        group_id: *const ::std::os::raw::c_char,
        vertical: bool,
    ) -> bool;
}
extern "C" {
    pub fn ImPlot_EndAlignedPlots();
}
extern "C" {
    pub fn ImPlot_BeginLegendPopup(
        label_id: *const ::std::os::raw::c_char,
        mouse_button: ImGuiMouseButton,
    ) -> bool;
}
extern "C" {
    pub fn ImPlot_EndLegendPopup();
}
extern "C" {
    pub fn ImPlot_IsLegendEntryHovered(label_id: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn ImPlot_BeginDragDropTargetPlot() -> bool;
}
extern "C" {
    pub fn ImPlot_BeginDragDropTargetAxis(axis: ImAxis) -> bool;
}
extern "C" {
    pub fn ImPlot_BeginDragDropTargetLegend() -> bool;
}
extern "C" {
    pub fn ImPlot_EndDragDropTarget();
}
extern "C" {
    pub fn ImPlot_BeginDragDropSourcePlot(flags: ImGuiDragDropFlags) -> bool;
}
extern "C" {
    pub fn ImPlot_BeginDragDropSourceAxis(axis: ImAxis, flags: ImGuiDragDropFlags) -> bool;
}
extern "C" {
    pub fn ImPlot_BeginDragDropSourceItem(
        label_id: *const ::std::os::raw::c_char,
        flags: ImGuiDragDropFlags,
    ) -> bool;
}
extern "C" {
    pub fn ImPlot_EndDragDropSource();
}
extern "C" {
    pub fn ImPlot_GetStyle() -> *mut ImPlotStyle;
}
extern "C" {
    pub fn ImPlot_StyleColorsAuto(dst: *mut ImPlotStyle);
}
extern "C" {
    pub fn ImPlot_StyleColorsClassic(dst: *mut ImPlotStyle);
}
extern "C" {
    pub fn ImPlot_StyleColorsDark(dst: *mut ImPlotStyle);
}
extern "C" {
    pub fn ImPlot_StyleColorsLight(dst: *mut ImPlotStyle);
}
extern "C" {
    pub fn ImPlot_PushStyleColor_U32(idx: ImPlotCol, col: ImU32);
}
extern "C" {
    pub fn ImPlot_PushStyleColor_Vec4(idx: ImPlotCol, col: ImVec4);
}
extern "C" {
    pub fn ImPlot_PopStyleColor(count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ImPlot_PushStyleVar_Float(idx: ImPlotStyleVar, val: f32);
}
extern "C" {
    pub fn ImPlot_PushStyleVar_Int(idx: ImPlotStyleVar, val: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ImPlot_PushStyleVar_Vec2(idx: ImPlotStyleVar, val: ImVec2);
}
extern "C" {
    pub fn ImPlot_PopStyleVar(count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ImPlot_SetNextLineStyle(col: ImVec4, weight: f32);
}
extern "C" {
    pub fn ImPlot_SetNextFillStyle(col: ImVec4, alpha_mod: f32);
}
extern "C" {
    pub fn ImPlot_SetNextMarkerStyle(
        marker: ImPlotMarker,
        size: f32,
        fill: ImVec4,
        weight: f32,
        outline: ImVec4,
    );
}
extern "C" {
    pub fn ImPlot_SetNextErrorBarStyle(col: ImVec4, size: f32, weight: f32);
}
extern "C" {
    pub fn ImPlot_GetLastItemColor(pOut: *mut ImVec4);
}
extern "C" {
    pub fn ImPlot_GetStyleColorName(idx: ImPlotCol) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ImPlot_GetMarkerName(idx: ImPlotMarker) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ImPlot_AddColormap_Vec4Ptr(
        name: *const ::std::os::raw::c_char,
        cols: *const ImVec4,
        size: ::std::os::raw::c_int,
        qual: bool,
    ) -> ImPlotColormap;
}
extern "C" {
    pub fn ImPlot_AddColormap_U32Ptr(
        name: *const ::std::os::raw::c_char,
        cols: *const ImU32,
        size: ::std::os::raw::c_int,
        qual: bool,
    ) -> ImPlotColormap;
}
extern "C" {
    pub fn ImPlot_GetColormapCount() -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImPlot_GetColormapName(cmap: ImPlotColormap) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ImPlot_GetColormapIndex(name: *const ::std::os::raw::c_char) -> ImPlotColormap;
}
extern "C" {
    pub fn ImPlot_PushColormap_PlotColormap(cmap: ImPlotColormap);
}
extern "C" {
    pub fn ImPlot_PushColormap_Str(name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn ImPlot_PopColormap(count: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ImPlot_NextColormapColor(pOut: *mut ImVec4);
}
extern "C" {
    pub fn ImPlot_GetColormapSize(cmap: ImPlotColormap) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImPlot_GetColormapColor(
        pOut: *mut ImVec4,
        idx: ::std::os::raw::c_int,
        cmap: ImPlotColormap,
    );
}
extern "C" {
    pub fn ImPlot_SampleColormap(pOut: *mut ImVec4, t: f32, cmap: ImPlotColormap);
}
extern "C" {
    pub fn ImPlot_ColormapScale(
        label: *const ::std::os::raw::c_char,
        scale_min: f64,
        scale_max: f64,
        size: ImVec2,
        format: *const ::std::os::raw::c_char,
        flags: ImPlotColormapScaleFlags,
        cmap: ImPlotColormap,
    );
}
extern "C" {
    pub fn ImPlot_ColormapSlider(
        label: *const ::std::os::raw::c_char,
        t: *mut f32,
        out: *mut ImVec4,
        format: *const ::std::os::raw::c_char,
        cmap: ImPlotColormap,
    ) -> bool;
}
extern "C" {
    pub fn ImPlot_ColormapButton(
        label: *const ::std::os::raw::c_char,
        size: ImVec2,
        cmap: ImPlotColormap,
    ) -> bool;
}
extern "C" {
    pub fn ImPlot_BustColorCache(plot_title_id: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn ImPlot_GetInputMap() -> *mut ImPlotInputMap;
}
extern "C" {
    pub fn ImPlot_MapInputDefault(dst: *mut ImPlotInputMap);
}
extern "C" {
    pub fn ImPlot_MapInputReverse(dst: *mut ImPlotInputMap);
}
extern "C" {
    pub fn ImPlot_ItemIcon_Vec4(col: ImVec4);
}
extern "C" {
    pub fn ImPlot_ItemIcon_U32(col: ImU32);
}
extern "C" {
    pub fn ImPlot_ColormapIcon(cmap: ImPlotColormap);
}
extern "C" {
    pub fn ImPlot_GetPlotDrawList() -> *mut ImDrawList;
}
extern "C" {
    pub fn ImPlot_PushPlotClipRect(expand: f32);
}
extern "C" {
    pub fn ImPlot_PopPlotClipRect();
}
extern "C" {
    pub fn ImPlot_ShowStyleSelector(label: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn ImPlot_ShowColormapSelector(label: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn ImPlot_ShowInputMapSelector(label: *const ::std::os::raw::c_char) -> bool;
}
extern "C" {
    pub fn ImPlot_ShowStyleEditor(ref_: *mut ImPlotStyle);
}
extern "C" {
    pub fn ImPlot_ShowUserGuide();
}
extern "C" {
    pub fn ImPlot_ShowMetricsWindow(p_popen: *mut bool);
}
extern "C" {
    pub fn ImPlot_ShowDemoWindow(p_open: *mut bool);
}
extern "C" {
    pub fn ImPlot_ImLog10_Float(x: f32) -> f32;
}
extern "C" {
    pub fn ImPlot_ImLog10_double(x: f64) -> f64;
}
extern "C" {
    pub fn ImPlot_ImSinh_Float(x: f32) -> f32;
}
extern "C" {
    pub fn ImPlot_ImSinh_double(x: f64) -> f64;
}
extern "C" {
    pub fn ImPlot_ImAsinh_Float(x: f32) -> f32;
}
extern "C" {
    pub fn ImPlot_ImAsinh_double(x: f64) -> f64;
}
extern "C" {
    pub fn ImPlot_ImRemap_Float(x: f32, x0: f32, x1: f32, y0: f32, y1: f32) -> f32;
}
extern "C" {
    pub fn ImPlot_ImRemap_double(x: f64, x0: f64, x1: f64, y0: f64, y1: f64) -> f64;
}
extern "C" {
    pub fn ImPlot_ImRemap_S8(x: ImS8, x0: ImS8, x1: ImS8, y0: ImS8, y1: ImS8) -> ImS8;
}
extern "C" {
    pub fn ImPlot_ImRemap_U8(x: ImU8, x0: ImU8, x1: ImU8, y0: ImU8, y1: ImU8) -> ImU8;
}
extern "C" {
    pub fn ImPlot_ImRemap_S16(x: ImS16, x0: ImS16, x1: ImS16, y0: ImS16, y1: ImS16) -> ImS16;
}
extern "C" {
    pub fn ImPlot_ImRemap_U16(x: ImU16, x0: ImU16, x1: ImU16, y0: ImU16, y1: ImU16) -> ImU16;
}
extern "C" {
    pub fn ImPlot_ImRemap_S32(x: ImS32, x0: ImS32, x1: ImS32, y0: ImS32, y1: ImS32) -> ImS32;
}
extern "C" {
    pub fn ImPlot_ImRemap_U32(x: ImU32, x0: ImU32, x1: ImU32, y0: ImU32, y1: ImU32) -> ImU32;
}
extern "C" {
    pub fn ImPlot_ImRemap_S64(x: ImS64, x0: ImS64, x1: ImS64, y0: ImS64, y1: ImS64) -> ImS64;
}
extern "C" {
    pub fn ImPlot_ImRemap_U64(x: ImU64, x0: ImU64, x1: ImU64, y0: ImU64, y1: ImU64) -> ImU64;
}
extern "C" {
    pub fn ImPlot_ImRemap01_Float(x: f32, x0: f32, x1: f32) -> f32;
}
extern "C" {
    pub fn ImPlot_ImRemap01_double(x: f64, x0: f64, x1: f64) -> f64;
}
extern "C" {
    pub fn ImPlot_ImRemap01_S8(x: ImS8, x0: ImS8, x1: ImS8) -> ImS8;
}
extern "C" {
    pub fn ImPlot_ImRemap01_U8(x: ImU8, x0: ImU8, x1: ImU8) -> ImU8;
}
extern "C" {
    pub fn ImPlot_ImRemap01_S16(x: ImS16, x0: ImS16, x1: ImS16) -> ImS16;
}
extern "C" {
    pub fn ImPlot_ImRemap01_U16(x: ImU16, x0: ImU16, x1: ImU16) -> ImU16;
}
extern "C" {
    pub fn ImPlot_ImRemap01_S32(x: ImS32, x0: ImS32, x1: ImS32) -> ImS32;
}
extern "C" {
    pub fn ImPlot_ImRemap01_U32(x: ImU32, x0: ImU32, x1: ImU32) -> ImU32;
}
extern "C" {
    pub fn ImPlot_ImRemap01_S64(x: ImS64, x0: ImS64, x1: ImS64) -> ImS64;
}
extern "C" {
    pub fn ImPlot_ImRemap01_U64(x: ImU64, x0: ImU64, x1: ImU64) -> ImU64;
}
extern "C" {
    pub fn ImPlot_ImPosMod(
        l: ::std::os::raw::c_int,
        r: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImPlot_ImNan(val: f64) -> bool;
}
extern "C" {
    pub fn ImPlot_ImNanOrInf(val: f64) -> bool;
}
extern "C" {
    pub fn ImPlot_ImConstrainNan(val: f64) -> f64;
}
extern "C" {
    pub fn ImPlot_ImConstrainInf(val: f64) -> f64;
}
extern "C" {
    pub fn ImPlot_ImConstrainLog(val: f64) -> f64;
}
extern "C" {
    pub fn ImPlot_ImConstrainTime(val: f64) -> f64;
}
extern "C" {
    pub fn ImPlot_ImAlmostEqual(v1: f64, v2: f64, ulp: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn ImPlot_ImMinArray_FloatPtr(values: *const f32, count: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ImPlot_ImMinArray_doublePtr(values: *const f64, count: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ImPlot_ImMinArray_S8Ptr(values: *const ImS8, count: ::std::os::raw::c_int) -> ImS8;
}
extern "C" {
    pub fn ImPlot_ImMinArray_U8Ptr(values: *const ImU8, count: ::std::os::raw::c_int) -> ImU8;
}
extern "C" {
    pub fn ImPlot_ImMinArray_S16Ptr(values: *const ImS16, count: ::std::os::raw::c_int) -> ImS16;
}
extern "C" {
    pub fn ImPlot_ImMinArray_U16Ptr(values: *const ImU16, count: ::std::os::raw::c_int) -> ImU16;
}
extern "C" {
    pub fn ImPlot_ImMinArray_S32Ptr(values: *const ImS32, count: ::std::os::raw::c_int) -> ImS32;
}
extern "C" {
    pub fn ImPlot_ImMinArray_U32Ptr(values: *const ImU32, count: ::std::os::raw::c_int) -> ImU32;
}
extern "C" {
    pub fn ImPlot_ImMinArray_S64Ptr(values: *const ImS64, count: ::std::os::raw::c_int) -> ImS64;
}
extern "C" {
    pub fn ImPlot_ImMinArray_U64Ptr(values: *const ImU64, count: ::std::os::raw::c_int) -> ImU64;
}
extern "C" {
    pub fn ImPlot_ImMaxArray_FloatPtr(values: *const f32, count: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ImPlot_ImMaxArray_doublePtr(values: *const f64, count: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ImPlot_ImMaxArray_S8Ptr(values: *const ImS8, count: ::std::os::raw::c_int) -> ImS8;
}
extern "C" {
    pub fn ImPlot_ImMaxArray_U8Ptr(values: *const ImU8, count: ::std::os::raw::c_int) -> ImU8;
}
extern "C" {
    pub fn ImPlot_ImMaxArray_S16Ptr(values: *const ImS16, count: ::std::os::raw::c_int) -> ImS16;
}
extern "C" {
    pub fn ImPlot_ImMaxArray_U16Ptr(values: *const ImU16, count: ::std::os::raw::c_int) -> ImU16;
}
extern "C" {
    pub fn ImPlot_ImMaxArray_S32Ptr(values: *const ImS32, count: ::std::os::raw::c_int) -> ImS32;
}
extern "C" {
    pub fn ImPlot_ImMaxArray_U32Ptr(values: *const ImU32, count: ::std::os::raw::c_int) -> ImU32;
}
extern "C" {
    pub fn ImPlot_ImMaxArray_S64Ptr(values: *const ImS64, count: ::std::os::raw::c_int) -> ImS64;
}
extern "C" {
    pub fn ImPlot_ImMaxArray_U64Ptr(values: *const ImU64, count: ::std::os::raw::c_int) -> ImU64;
}
extern "C" {
    pub fn ImPlot_ImMinMaxArray_FloatPtr(
        values: *const f32,
        count: ::std::os::raw::c_int,
        min_out: *mut f32,
        max_out: *mut f32,
    );
}
extern "C" {
    pub fn ImPlot_ImMinMaxArray_doublePtr(
        values: *const f64,
        count: ::std::os::raw::c_int,
        min_out: *mut f64,
        max_out: *mut f64,
    );
}
extern "C" {
    pub fn ImPlot_ImMinMaxArray_S8Ptr(
        values: *const ImS8,
        count: ::std::os::raw::c_int,
        min_out: *mut ImS8,
        max_out: *mut ImS8,
    );
}
extern "C" {
    pub fn ImPlot_ImMinMaxArray_U8Ptr(
        values: *const ImU8,
        count: ::std::os::raw::c_int,
        min_out: *mut ImU8,
        max_out: *mut ImU8,
    );
}
extern "C" {
    pub fn ImPlot_ImMinMaxArray_S16Ptr(
        values: *const ImS16,
        count: ::std::os::raw::c_int,
        min_out: *mut ImS16,
        max_out: *mut ImS16,
    );
}
extern "C" {
    pub fn ImPlot_ImMinMaxArray_U16Ptr(
        values: *const ImU16,
        count: ::std::os::raw::c_int,
        min_out: *mut ImU16,
        max_out: *mut ImU16,
    );
}
extern "C" {
    pub fn ImPlot_ImMinMaxArray_S32Ptr(
        values: *const ImS32,
        count: ::std::os::raw::c_int,
        min_out: *mut ImS32,
        max_out: *mut ImS32,
    );
}
extern "C" {
    pub fn ImPlot_ImMinMaxArray_U32Ptr(
        values: *const ImU32,
        count: ::std::os::raw::c_int,
        min_out: *mut ImU32,
        max_out: *mut ImU32,
    );
}
extern "C" {
    pub fn ImPlot_ImMinMaxArray_S64Ptr(
        values: *const ImS64,
        count: ::std::os::raw::c_int,
        min_out: *mut ImS64,
        max_out: *mut ImS64,
    );
}
extern "C" {
    pub fn ImPlot_ImMinMaxArray_U64Ptr(
        values: *const ImU64,
        count: ::std::os::raw::c_int,
        min_out: *mut ImU64,
        max_out: *mut ImU64,
    );
}
extern "C" {
    pub fn ImPlot_ImSum_FloatPtr(values: *const f32, count: ::std::os::raw::c_int) -> f32;
}
extern "C" {
    pub fn ImPlot_ImSum_doublePtr(values: *const f64, count: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ImPlot_ImSum_S8Ptr(values: *const ImS8, count: ::std::os::raw::c_int) -> ImS8;
}
extern "C" {
    pub fn ImPlot_ImSum_U8Ptr(values: *const ImU8, count: ::std::os::raw::c_int) -> ImU8;
}
extern "C" {
    pub fn ImPlot_ImSum_S16Ptr(values: *const ImS16, count: ::std::os::raw::c_int) -> ImS16;
}
extern "C" {
    pub fn ImPlot_ImSum_U16Ptr(values: *const ImU16, count: ::std::os::raw::c_int) -> ImU16;
}
extern "C" {
    pub fn ImPlot_ImSum_S32Ptr(values: *const ImS32, count: ::std::os::raw::c_int) -> ImS32;
}
extern "C" {
    pub fn ImPlot_ImSum_U32Ptr(values: *const ImU32, count: ::std::os::raw::c_int) -> ImU32;
}
extern "C" {
    pub fn ImPlot_ImSum_S64Ptr(values: *const ImS64, count: ::std::os::raw::c_int) -> ImS64;
}
extern "C" {
    pub fn ImPlot_ImSum_U64Ptr(values: *const ImU64, count: ::std::os::raw::c_int) -> ImU64;
}
extern "C" {
    pub fn ImPlot_ImMean_FloatPtr(values: *const f32, count: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ImPlot_ImMean_doublePtr(values: *const f64, count: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ImPlot_ImMean_S8Ptr(values: *const ImS8, count: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ImPlot_ImMean_U8Ptr(values: *const ImU8, count: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ImPlot_ImMean_S16Ptr(values: *const ImS16, count: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ImPlot_ImMean_U16Ptr(values: *const ImU16, count: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ImPlot_ImMean_S32Ptr(values: *const ImS32, count: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ImPlot_ImMean_U32Ptr(values: *const ImU32, count: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ImPlot_ImMean_S64Ptr(values: *const ImS64, count: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ImPlot_ImMean_U64Ptr(values: *const ImU64, count: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ImPlot_ImStdDev_FloatPtr(values: *const f32, count: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ImPlot_ImStdDev_doublePtr(values: *const f64, count: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ImPlot_ImStdDev_S8Ptr(values: *const ImS8, count: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ImPlot_ImStdDev_U8Ptr(values: *const ImU8, count: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ImPlot_ImStdDev_S16Ptr(values: *const ImS16, count: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ImPlot_ImStdDev_U16Ptr(values: *const ImU16, count: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ImPlot_ImStdDev_S32Ptr(values: *const ImS32, count: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ImPlot_ImStdDev_U32Ptr(values: *const ImU32, count: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ImPlot_ImStdDev_S64Ptr(values: *const ImS64, count: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ImPlot_ImStdDev_U64Ptr(values: *const ImU64, count: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ImPlot_ImMixU32(a: ImU32, b: ImU32, s: ImU32) -> ImU32;
}
extern "C" {
    pub fn ImPlot_ImLerpU32(colors: *const ImU32, size: ::std::os::raw::c_int, t: f32) -> ImU32;
}
extern "C" {
    pub fn ImPlot_ImAlphaU32(col: ImU32, alpha: f32) -> ImU32;
}
extern "C" {
    pub fn ImPlot_ImOverlaps_Float(min_a: f32, max_a: f32, min_b: f32, max_b: f32) -> bool;
}
extern "C" {
    pub fn ImPlot_ImOverlaps_double(min_a: f64, max_a: f64, min_b: f64, max_b: f64) -> bool;
}
extern "C" {
    pub fn ImPlot_ImOverlaps_S8(min_a: ImS8, max_a: ImS8, min_b: ImS8, max_b: ImS8) -> bool;
}
extern "C" {
    pub fn ImPlot_ImOverlaps_U8(min_a: ImU8, max_a: ImU8, min_b: ImU8, max_b: ImU8) -> bool;
}
extern "C" {
    pub fn ImPlot_ImOverlaps_S16(min_a: ImS16, max_a: ImS16, min_b: ImS16, max_b: ImS16) -> bool;
}
extern "C" {
    pub fn ImPlot_ImOverlaps_U16(min_a: ImU16, max_a: ImU16, min_b: ImU16, max_b: ImU16) -> bool;
}
extern "C" {
    pub fn ImPlot_ImOverlaps_S32(min_a: ImS32, max_a: ImS32, min_b: ImS32, max_b: ImS32) -> bool;
}
extern "C" {
    pub fn ImPlot_ImOverlaps_U32(min_a: ImU32, max_a: ImU32, min_b: ImU32, max_b: ImU32) -> bool;
}
extern "C" {
    pub fn ImPlot_ImOverlaps_S64(min_a: ImS64, max_a: ImS64, min_b: ImS64, max_b: ImS64) -> bool;
}
extern "C" {
    pub fn ImPlot_ImOverlaps_U64(min_a: ImU64, max_a: ImU64, min_b: ImU64, max_b: ImU64) -> bool;
}
extern "C" {
    pub fn ImPlotDateTimeSpec_ImPlotDateTimeSpec_Nil() -> *mut ImPlotDateTimeSpec;
}
extern "C" {
    pub fn ImPlotDateTimeSpec_destroy(self_: *mut ImPlotDateTimeSpec);
}
extern "C" {
    pub fn ImPlotDateTimeSpec_ImPlotDateTimeSpec_PlotDateFmt(
        date_fmt: ImPlotDateFmt,
        time_fmt: ImPlotTimeFmt,
        use_24_hr_clk: bool,
        use_iso_8601: bool,
    ) -> *mut ImPlotDateTimeSpec;
}
extern "C" {
    pub fn ImPlotTime_ImPlotTime_Nil() -> *mut ImPlotTime;
}
extern "C" {
    pub fn ImPlotTime_destroy(self_: *mut ImPlotTime);
}
extern "C" {
    pub fn ImPlotTime_ImPlotTime_time_t(s: time_t, us: ::std::os::raw::c_int) -> *mut ImPlotTime;
}
extern "C" {
    pub fn ImPlotTime_RollOver(self_: *mut ImPlotTime);
}
extern "C" {
    pub fn ImPlotTime_ToDouble(self_: *mut ImPlotTime) -> f64;
}
extern "C" {
    pub fn ImPlotTime_FromDouble(pOut: *mut ImPlotTime, t: f64);
}
extern "C" {
    pub fn ImPlotColormapData_ImPlotColormapData() -> *mut ImPlotColormapData;
}
extern "C" {
    pub fn ImPlotColormapData_destroy(self_: *mut ImPlotColormapData);
}
extern "C" {
    pub fn ImPlotColormapData_Append(
        self_: *mut ImPlotColormapData,
        name: *const ::std::os::raw::c_char,
        keys: *const ImU32,
        count: ::std::os::raw::c_int,
        qual: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImPlotColormapData__AppendTable(self_: *mut ImPlotColormapData, cmap: ImPlotColormap);
}
extern "C" {
    pub fn ImPlotColormapData_RebuildTables(self_: *mut ImPlotColormapData);
}
extern "C" {
    pub fn ImPlotColormapData_IsQual(self_: *mut ImPlotColormapData, cmap: ImPlotColormap) -> bool;
}
extern "C" {
    pub fn ImPlotColormapData_GetName(
        self_: *mut ImPlotColormapData,
        cmap: ImPlotColormap,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ImPlotColormapData_GetIndex(
        self_: *mut ImPlotColormapData,
        name: *const ::std::os::raw::c_char,
    ) -> ImPlotColormap;
}
extern "C" {
    pub fn ImPlotColormapData_GetKeys(
        self_: *mut ImPlotColormapData,
        cmap: ImPlotColormap,
    ) -> *const ImU32;
}
extern "C" {
    pub fn ImPlotColormapData_GetKeyCount(
        self_: *mut ImPlotColormapData,
        cmap: ImPlotColormap,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImPlotColormapData_GetKeyColor(
        self_: *mut ImPlotColormapData,
        cmap: ImPlotColormap,
        idx: ::std::os::raw::c_int,
    ) -> ImU32;
}
extern "C" {
    pub fn ImPlotColormapData_SetKeyColor(
        self_: *mut ImPlotColormapData,
        cmap: ImPlotColormap,
        idx: ::std::os::raw::c_int,
        value: ImU32,
    );
}
extern "C" {
    pub fn ImPlotColormapData_GetTable(
        self_: *mut ImPlotColormapData,
        cmap: ImPlotColormap,
    ) -> *const ImU32;
}
extern "C" {
    pub fn ImPlotColormapData_GetTableSize(
        self_: *mut ImPlotColormapData,
        cmap: ImPlotColormap,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImPlotColormapData_GetTableColor(
        self_: *mut ImPlotColormapData,
        cmap: ImPlotColormap,
        idx: ::std::os::raw::c_int,
    ) -> ImU32;
}
extern "C" {
    pub fn ImPlotColormapData_LerpTable(
        self_: *mut ImPlotColormapData,
        cmap: ImPlotColormap,
        t: f32,
    ) -> ImU32;
}
extern "C" {
    pub fn ImPlotPointError_ImPlotPointError(
        x: f64,
        y: f64,
        neg: f64,
        pos: f64,
    ) -> *mut ImPlotPointError;
}
extern "C" {
    pub fn ImPlotPointError_destroy(self_: *mut ImPlotPointError);
}
extern "C" {
    pub fn ImPlotAnnotation_ImPlotAnnotation() -> *mut ImPlotAnnotation;
}
extern "C" {
    pub fn ImPlotAnnotation_destroy(self_: *mut ImPlotAnnotation);
}
extern "C" {
    pub fn ImPlotAnnotationCollection_ImPlotAnnotationCollection() -> *mut ImPlotAnnotationCollection;
}
extern "C" {
    pub fn ImPlotAnnotationCollection_destroy(self_: *mut ImPlotAnnotationCollection);
}
extern "C" {
    pub fn ImPlotAnnotationCollection_Append(
        self_: *mut ImPlotAnnotationCollection,
        pos: ImVec2,
        off: ImVec2,
        bg: ImU32,
        fg: ImU32,
        clamp: bool,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn ImPlotAnnotationCollection_GetText(
        self_: *mut ImPlotAnnotationCollection,
        idx: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ImPlotAnnotationCollection_Reset(self_: *mut ImPlotAnnotationCollection);
}
extern "C" {
    pub fn ImPlotTagCollection_ImPlotTagCollection() -> *mut ImPlotTagCollection;
}
extern "C" {
    pub fn ImPlotTagCollection_destroy(self_: *mut ImPlotTagCollection);
}
extern "C" {
    pub fn ImPlotTagCollection_Append(
        self_: *mut ImPlotTagCollection,
        axis: ImAxis,
        value: f64,
        bg: ImU32,
        fg: ImU32,
        fmt: *const ::std::os::raw::c_char,
        ...
    );
}
extern "C" {
    pub fn ImPlotTagCollection_GetText(
        self_: *mut ImPlotTagCollection,
        idx: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ImPlotTagCollection_Reset(self_: *mut ImPlotTagCollection);
}
extern "C" {
    pub fn ImPlotTick_ImPlotTick(
        value: f64,
        major: bool,
        level: ::std::os::raw::c_int,
        show_label: bool,
    ) -> *mut ImPlotTick;
}
extern "C" {
    pub fn ImPlotTick_destroy(self_: *mut ImPlotTick);
}
extern "C" {
    pub fn ImPlotTicker_ImPlotTicker() -> *mut ImPlotTicker;
}
extern "C" {
    pub fn ImPlotTicker_destroy(self_: *mut ImPlotTicker);
}
extern "C" {
    pub fn ImPlotTicker_AddTick_doubleStr(
        self_: *mut ImPlotTicker,
        value: f64,
        major: bool,
        level: ::std::os::raw::c_int,
        show_label: bool,
        label: *const ::std::os::raw::c_char,
    ) -> *mut ImPlotTick;
}
extern "C" {
    pub fn ImPlotTicker_AddTick_doublePlotFormatter(
        self_: *mut ImPlotTicker,
        value: f64,
        major: bool,
        level: ::std::os::raw::c_int,
        show_label: bool,
        formatter: ImPlotFormatter,
        data: *mut ::std::os::raw::c_void,
    ) -> *mut ImPlotTick;
}
extern "C" {
    pub fn ImPlotTicker_AddTick_PlotTick(
        self_: *mut ImPlotTicker,
        tick: ImPlotTick,
    ) -> *mut ImPlotTick;
}
extern "C" {
    pub fn ImPlotTicker_GetText_Int(
        self_: *mut ImPlotTicker,
        idx: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ImPlotTicker_GetText_PlotTick(
        self_: *mut ImPlotTicker,
        tick: ImPlotTick,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ImPlotTicker_OverrideSizeLate(self_: *mut ImPlotTicker, size: ImVec2);
}
extern "C" {
    pub fn ImPlotTicker_Reset(self_: *mut ImPlotTicker);
}
extern "C" {
    pub fn ImPlotTicker_TickCount(self_: *mut ImPlotTicker) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImPlotAxis_ImPlotAxis() -> *mut ImPlotAxis;
}
extern "C" {
    pub fn ImPlotAxis_destroy(self_: *mut ImPlotAxis);
}
extern "C" {
    pub fn ImPlotAxis_Reset(self_: *mut ImPlotAxis);
}
extern "C" {
    pub fn ImPlotAxis_SetMin(self_: *mut ImPlotAxis, _min: f64, force: bool) -> bool;
}
extern "C" {
    pub fn ImPlotAxis_SetMax(self_: *mut ImPlotAxis, _max: f64, force: bool) -> bool;
}
extern "C" {
    pub fn ImPlotAxis_SetRange_double(self_: *mut ImPlotAxis, v1: f64, v2: f64);
}
extern "C" {
    pub fn ImPlotAxis_SetRange_PlotRange(self_: *mut ImPlotAxis, range: ImPlotRange);
}
extern "C" {
    pub fn ImPlotAxis_SetAspect(self_: *mut ImPlotAxis, unit_per_pix: f64);
}
extern "C" {
    pub fn ImPlotAxis_PixelSize(self_: *mut ImPlotAxis) -> f32;
}
extern "C" {
    pub fn ImPlotAxis_GetAspect(self_: *mut ImPlotAxis) -> f64;
}
extern "C" {
    pub fn ImPlotAxis_Constrain(self_: *mut ImPlotAxis);
}
extern "C" {
    pub fn ImPlotAxis_UpdateTransformCache(self_: *mut ImPlotAxis);
}
extern "C" {
    pub fn ImPlotAxis_PlotToPixels(self_: *mut ImPlotAxis, plt: f64) -> f32;
}
extern "C" {
    pub fn ImPlotAxis_PixelsToPlot(self_: *mut ImPlotAxis, pix: f32) -> f64;
}
extern "C" {
    pub fn ImPlotAxis_ExtendFit(self_: *mut ImPlotAxis, v: f64);
}
extern "C" {
    pub fn ImPlotAxis_ExtendFitWith(
        self_: *mut ImPlotAxis,
        alt: *mut ImPlotAxis,
        v: f64,
        v_alt: f64,
    );
}
extern "C" {
    pub fn ImPlotAxis_ApplyFit(self_: *mut ImPlotAxis, padding: f32);
}
extern "C" {
    pub fn ImPlotAxis_HasLabel(self_: *mut ImPlotAxis) -> bool;
}
extern "C" {
    pub fn ImPlotAxis_HasGridLines(self_: *mut ImPlotAxis) -> bool;
}
extern "C" {
    pub fn ImPlotAxis_HasTickLabels(self_: *mut ImPlotAxis) -> bool;
}
extern "C" {
    pub fn ImPlotAxis_HasTickMarks(self_: *mut ImPlotAxis) -> bool;
}
extern "C" {
    pub fn ImPlotAxis_WillRender(self_: *mut ImPlotAxis) -> bool;
}
extern "C" {
    pub fn ImPlotAxis_IsOpposite(self_: *mut ImPlotAxis) -> bool;
}
extern "C" {
    pub fn ImPlotAxis_IsInverted(self_: *mut ImPlotAxis) -> bool;
}
extern "C" {
    pub fn ImPlotAxis_IsForeground(self_: *mut ImPlotAxis) -> bool;
}
extern "C" {
    pub fn ImPlotAxis_IsAutoFitting(self_: *mut ImPlotAxis) -> bool;
}
extern "C" {
    pub fn ImPlotAxis_CanInitFit(self_: *mut ImPlotAxis) -> bool;
}
extern "C" {
    pub fn ImPlotAxis_IsRangeLocked(self_: *mut ImPlotAxis) -> bool;
}
extern "C" {
    pub fn ImPlotAxis_IsLockedMin(self_: *mut ImPlotAxis) -> bool;
}
extern "C" {
    pub fn ImPlotAxis_IsLockedMax(self_: *mut ImPlotAxis) -> bool;
}
extern "C" {
    pub fn ImPlotAxis_IsLocked(self_: *mut ImPlotAxis) -> bool;
}
extern "C" {
    pub fn ImPlotAxis_IsInputLockedMin(self_: *mut ImPlotAxis) -> bool;
}
extern "C" {
    pub fn ImPlotAxis_IsInputLockedMax(self_: *mut ImPlotAxis) -> bool;
}
extern "C" {
    pub fn ImPlotAxis_IsInputLocked(self_: *mut ImPlotAxis) -> bool;
}
extern "C" {
    pub fn ImPlotAxis_HasMenus(self_: *mut ImPlotAxis) -> bool;
}
extern "C" {
    pub fn ImPlotAxis_IsPanLocked(self_: *mut ImPlotAxis, increasing: bool) -> bool;
}
extern "C" {
    pub fn ImPlotAxis_PushLinks(self_: *mut ImPlotAxis);
}
extern "C" {
    pub fn ImPlotAxis_PullLinks(self_: *mut ImPlotAxis);
}
extern "C" {
    pub fn ImPlotAlignmentData_ImPlotAlignmentData() -> *mut ImPlotAlignmentData;
}
extern "C" {
    pub fn ImPlotAlignmentData_destroy(self_: *mut ImPlotAlignmentData);
}
extern "C" {
    pub fn ImPlotAlignmentData_Begin(self_: *mut ImPlotAlignmentData);
}
extern "C" {
    pub fn ImPlotAlignmentData_Update(
        self_: *mut ImPlotAlignmentData,
        pad_a: *mut f32,
        pad_b: *mut f32,
        delta_a: *mut f32,
        delta_b: *mut f32,
    );
}
extern "C" {
    pub fn ImPlotAlignmentData_End(self_: *mut ImPlotAlignmentData);
}
extern "C" {
    pub fn ImPlotAlignmentData_Reset(self_: *mut ImPlotAlignmentData);
}
extern "C" {
    pub fn ImPlotItem_ImPlotItem() -> *mut ImPlotItem;
}
extern "C" {
    pub fn ImPlotItem_destroy(self_: *mut ImPlotItem);
}
extern "C" {
    pub fn ImPlotLegend_ImPlotLegend() -> *mut ImPlotLegend;
}
extern "C" {
    pub fn ImPlotLegend_destroy(self_: *mut ImPlotLegend);
}
extern "C" {
    pub fn ImPlotLegend_Reset(self_: *mut ImPlotLegend);
}
extern "C" {
    pub fn ImPlotItemGroup_ImPlotItemGroup() -> *mut ImPlotItemGroup;
}
extern "C" {
    pub fn ImPlotItemGroup_destroy(self_: *mut ImPlotItemGroup);
}
extern "C" {
    pub fn ImPlotItemGroup_GetItemCount(self_: *mut ImPlotItemGroup) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImPlotItemGroup_GetItemID(
        self_: *mut ImPlotItemGroup,
        label_id: *const ::std::os::raw::c_char,
    ) -> ImGuiID;
}
extern "C" {
    pub fn ImPlotItemGroup_GetItem_ID(self_: *mut ImPlotItemGroup, id: ImGuiID) -> *mut ImPlotItem;
}
extern "C" {
    pub fn ImPlotItemGroup_GetItem_Str(
        self_: *mut ImPlotItemGroup,
        label_id: *const ::std::os::raw::c_char,
    ) -> *mut ImPlotItem;
}
extern "C" {
    pub fn ImPlotItemGroup_GetOrAddItem(
        self_: *mut ImPlotItemGroup,
        id: ImGuiID,
    ) -> *mut ImPlotItem;
}
extern "C" {
    pub fn ImPlotItemGroup_GetItemByIndex(
        self_: *mut ImPlotItemGroup,
        i: ::std::os::raw::c_int,
    ) -> *mut ImPlotItem;
}
extern "C" {
    pub fn ImPlotItemGroup_GetItemIndex(
        self_: *mut ImPlotItemGroup,
        item: *mut ImPlotItem,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImPlotItemGroup_GetLegendCount(self_: *mut ImPlotItemGroup) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImPlotItemGroup_GetLegendItem(
        self_: *mut ImPlotItemGroup,
        i: ::std::os::raw::c_int,
    ) -> *mut ImPlotItem;
}
extern "C" {
    pub fn ImPlotItemGroup_GetLegendLabel(
        self_: *mut ImPlotItemGroup,
        i: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ImPlotItemGroup_Reset(self_: *mut ImPlotItemGroup);
}
extern "C" {
    pub fn ImPlotPlot_ImPlotPlot() -> *mut ImPlotPlot;
}
extern "C" {
    pub fn ImPlotPlot_destroy(self_: *mut ImPlotPlot);
}
extern "C" {
    pub fn ImPlotPlot_IsInputLocked(self_: *mut ImPlotPlot) -> bool;
}
extern "C" {
    pub fn ImPlotPlot_ClearTextBuffer(self_: *mut ImPlotPlot);
}
extern "C" {
    pub fn ImPlotPlot_SetTitle(self_: *mut ImPlotPlot, title: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn ImPlotPlot_HasTitle(self_: *mut ImPlotPlot) -> bool;
}
extern "C" {
    pub fn ImPlotPlot_GetTitle(self_: *mut ImPlotPlot) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ImPlotPlot_XAxis_Nil(
        self_: *mut ImPlotPlot,
        i: ::std::os::raw::c_int,
    ) -> *mut ImPlotAxis;
}
extern "C" {
    pub fn ImPlotPlot_XAxis__const(
        self_: *mut ImPlotPlot,
        i: ::std::os::raw::c_int,
    ) -> *const ImPlotAxis;
}
extern "C" {
    pub fn ImPlotPlot_YAxis_Nil(
        self_: *mut ImPlotPlot,
        i: ::std::os::raw::c_int,
    ) -> *mut ImPlotAxis;
}
extern "C" {
    pub fn ImPlotPlot_YAxis__const(
        self_: *mut ImPlotPlot,
        i: ::std::os::raw::c_int,
    ) -> *const ImPlotAxis;
}
extern "C" {
    pub fn ImPlotPlot_EnabledAxesX(self_: *mut ImPlotPlot) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImPlotPlot_EnabledAxesY(self_: *mut ImPlotPlot) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImPlotPlot_SetAxisLabel(
        self_: *mut ImPlotPlot,
        axis: *mut ImPlotAxis,
        label: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ImPlotPlot_GetAxisLabel(
        self_: *mut ImPlotPlot,
        axis: ImPlotAxis,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ImPlotSubplot_ImPlotSubplot() -> *mut ImPlotSubplot;
}
extern "C" {
    pub fn ImPlotSubplot_destroy(self_: *mut ImPlotSubplot);
}
extern "C" {
    pub fn ImPlotNextPlotData_ImPlotNextPlotData() -> *mut ImPlotNextPlotData;
}
extern "C" {
    pub fn ImPlotNextPlotData_destroy(self_: *mut ImPlotNextPlotData);
}
extern "C" {
    pub fn ImPlotNextPlotData_Reset(self_: *mut ImPlotNextPlotData);
}
extern "C" {
    pub fn ImPlotNextItemData_ImPlotNextItemData() -> *mut ImPlotNextItemData;
}
extern "C" {
    pub fn ImPlotNextItemData_destroy(self_: *mut ImPlotNextItemData);
}
extern "C" {
    pub fn ImPlotNextItemData_Reset(self_: *mut ImPlotNextItemData);
}
extern "C" {
    pub fn ImPlot_Initialize(ctx: *mut ImPlotContext);
}
extern "C" {
    pub fn ImPlot_ResetCtxForNextPlot(ctx: *mut ImPlotContext);
}
extern "C" {
    pub fn ImPlot_ResetCtxForNextAlignedPlots(ctx: *mut ImPlotContext);
}
extern "C" {
    pub fn ImPlot_ResetCtxForNextSubplot(ctx: *mut ImPlotContext);
}
extern "C" {
    pub fn ImPlot_GetPlot(title: *const ::std::os::raw::c_char) -> *mut ImPlotPlot;
}
extern "C" {
    pub fn ImPlot_GetCurrentPlot() -> *mut ImPlotPlot;
}
extern "C" {
    pub fn ImPlot_BustPlotCache();
}
extern "C" {
    pub fn ImPlot_ShowPlotContextMenu(plot: *mut ImPlotPlot);
}
extern "C" {
    pub fn ImPlot_SetupLock();
}
extern "C" {
    pub fn ImPlot_SubplotNextCell();
}
extern "C" {
    pub fn ImPlot_ShowSubplotsContextMenu(subplot: *mut ImPlotSubplot);
}
extern "C" {
    pub fn ImPlot_BeginItem(
        label_id: *const ::std::os::raw::c_char,
        flags: ImPlotItemFlags,
        recolor_from: ImPlotCol,
    ) -> bool;
}
extern "C" {
    pub fn ImPlot_EndItem();
}
extern "C" {
    pub fn ImPlot_RegisterOrGetItem(
        label_id: *const ::std::os::raw::c_char,
        flags: ImPlotItemFlags,
        just_created: *mut bool,
    ) -> *mut ImPlotItem;
}
extern "C" {
    pub fn ImPlot_GetItem(label_id: *const ::std::os::raw::c_char) -> *mut ImPlotItem;
}
extern "C" {
    pub fn ImPlot_GetCurrentItem() -> *mut ImPlotItem;
}
extern "C" {
    pub fn ImPlot_BustItemCache();
}
extern "C" {
    pub fn ImPlot_AnyAxesInputLocked(axes: *mut ImPlotAxis, count: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn ImPlot_AllAxesInputLocked(axes: *mut ImPlotAxis, count: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn ImPlot_AnyAxesHeld(axes: *mut ImPlotAxis, count: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn ImPlot_AnyAxesHovered(axes: *mut ImPlotAxis, count: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn ImPlot_FitThisFrame() -> bool;
}
extern "C" {
    pub fn ImPlot_FitPointX(x: f64);
}
extern "C" {
    pub fn ImPlot_FitPointY(y: f64);
}
extern "C" {
    pub fn ImPlot_FitPoint(p: ImPlotPoint);
}
extern "C" {
    pub fn ImPlot_RangesOverlap(r1: ImPlotRange, r2: ImPlotRange) -> bool;
}
extern "C" {
    pub fn ImPlot_ShowAxisContextMenu(
        axis: *mut ImPlotAxis,
        equal_axis: *mut ImPlotAxis,
        time_allowed: bool,
    );
}
extern "C" {
    pub fn ImPlot_GetLocationPos(
        pOut: *mut ImVec2,
        outer_rect: ImRect,
        inner_size: ImVec2,
        location: ImPlotLocation,
        pad: ImVec2,
    );
}
extern "C" {
    pub fn ImPlot_CalcLegendSize(
        pOut: *mut ImVec2,
        items: *mut ImPlotItemGroup,
        pad: ImVec2,
        spacing: ImVec2,
        vertical: bool,
    );
}
extern "C" {
    pub fn ImPlot_ClampLegendRect(
        legend_rect: *mut ImRect,
        outer_rect: ImRect,
        pad: ImVec2,
    ) -> bool;
}
extern "C" {
    pub fn ImPlot_ShowLegendEntries(
        items: *mut ImPlotItemGroup,
        legend_bb: ImRect,
        interactable: bool,
        pad: ImVec2,
        spacing: ImVec2,
        vertical: bool,
        DrawList: *mut ImDrawList,
    ) -> bool;
}
extern "C" {
    pub fn ImPlot_ShowAltLegend(
        title_id: *const ::std::os::raw::c_char,
        vertical: bool,
        size: ImVec2,
        interactable: bool,
    );
}
extern "C" {
    pub fn ImPlot_ShowLegendContextMenu(legend: *mut ImPlotLegend, visible: bool) -> bool;
}
extern "C" {
    pub fn ImPlot_LabelAxisValue(
        axis: ImPlotAxis,
        value: f64,
        buff: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        round: bool,
    );
}
extern "C" {
    pub fn ImPlot_GetItemData() -> *const ImPlotNextItemData;
}
extern "C" {
    pub fn ImPlot_IsColorAuto_Vec4(col: ImVec4) -> bool;
}
extern "C" {
    pub fn ImPlot_IsColorAuto_PlotCol(idx: ImPlotCol) -> bool;
}
extern "C" {
    pub fn ImPlot_GetAutoColor(pOut: *mut ImVec4, idx: ImPlotCol);
}
extern "C" {
    pub fn ImPlot_GetStyleColorVec4(pOut: *mut ImVec4, idx: ImPlotCol);
}
extern "C" {
    pub fn ImPlot_GetStyleColorU32(idx: ImPlotCol) -> ImU32;
}
extern "C" {
    pub fn ImPlot_AddTextVertical(
        DrawList: *mut ImDrawList,
        pos: ImVec2,
        col: ImU32,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ImPlot_AddTextCentered(
        DrawList: *mut ImDrawList,
        top_center: ImVec2,
        col: ImU32,
        text_begin: *const ::std::os::raw::c_char,
        text_end: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ImPlot_CalcTextSizeVertical(pOut: *mut ImVec2, text: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn ImPlot_CalcTextColor_Vec4(bg: ImVec4) -> ImU32;
}
extern "C" {
    pub fn ImPlot_CalcTextColor_U32(bg: ImU32) -> ImU32;
}
extern "C" {
    pub fn ImPlot_CalcHoverColor(col: ImU32) -> ImU32;
}
extern "C" {
    pub fn ImPlot_ClampLabelPos(
        pOut: *mut ImVec2,
        pos: ImVec2,
        size: ImVec2,
        Min: ImVec2,
        Max: ImVec2,
    );
}
extern "C" {
    pub fn ImPlot_GetColormapColorU32(idx: ::std::os::raw::c_int, cmap: ImPlotColormap) -> ImU32;
}
extern "C" {
    pub fn ImPlot_NextColormapColorU32() -> ImU32;
}
extern "C" {
    pub fn ImPlot_SampleColormapU32(t: f32, cmap: ImPlotColormap) -> ImU32;
}
extern "C" {
    pub fn ImPlot_RenderColorBar(
        colors: *const ImU32,
        size: ::std::os::raw::c_int,
        DrawList: *mut ImDrawList,
        bounds: ImRect,
        vert: bool,
        reversed: bool,
        continuous: bool,
    );
}
extern "C" {
    pub fn ImPlot_NiceNum(x: f64, round: bool) -> f64;
}
extern "C" {
    pub fn ImPlot_OrderOfMagnitude(val: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImPlot_OrderToPrecision(order: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImPlot_Precision(val: f64) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImPlot_RoundTo(val: f64, prec: ::std::os::raw::c_int) -> f64;
}
extern "C" {
    pub fn ImPlot_Intersection(pOut: *mut ImVec2, a1: ImVec2, a2: ImVec2, b1: ImVec2, b2: ImVec2);
}
extern "C" {
    pub fn ImPlot_FillRange_Vector_Float_Ptr(
        buffer: *mut ImVector_float,
        n: ::std::os::raw::c_int,
        vmin: f32,
        vmax: f32,
    );
}
extern "C" {
    pub fn ImPlot_FillRange_Vector_double_Ptr(
        buffer: *mut ImVector_double,
        n: ::std::os::raw::c_int,
        vmin: f64,
        vmax: f64,
    );
}
extern "C" {
    pub fn ImPlot_FillRange_Vector_S8_Ptr(
        buffer: *mut ImVector_ImS8,
        n: ::std::os::raw::c_int,
        vmin: ImS8,
        vmax: ImS8,
    );
}
extern "C" {
    pub fn ImPlot_FillRange_Vector_U8_Ptr(
        buffer: *mut ImVector_ImU8,
        n: ::std::os::raw::c_int,
        vmin: ImU8,
        vmax: ImU8,
    );
}
extern "C" {
    pub fn ImPlot_FillRange_Vector_S16_Ptr(
        buffer: *mut ImVector_ImS16,
        n: ::std::os::raw::c_int,
        vmin: ImS16,
        vmax: ImS16,
    );
}
extern "C" {
    pub fn ImPlot_FillRange_Vector_U16_Ptr(
        buffer: *mut ImVector_ImU16,
        n: ::std::os::raw::c_int,
        vmin: ImU16,
        vmax: ImU16,
    );
}
extern "C" {
    pub fn ImPlot_FillRange_Vector_S32_Ptr(
        buffer: *mut ImVector_ImS32,
        n: ::std::os::raw::c_int,
        vmin: ImS32,
        vmax: ImS32,
    );
}
extern "C" {
    pub fn ImPlot_FillRange_Vector_U32_Ptr(
        buffer: *mut ImVector_ImU32,
        n: ::std::os::raw::c_int,
        vmin: ImU32,
        vmax: ImU32,
    );
}
extern "C" {
    pub fn ImPlot_FillRange_Vector_S64_Ptr(
        buffer: *mut ImVector_ImS64,
        n: ::std::os::raw::c_int,
        vmin: ImS64,
        vmax: ImS64,
    );
}
extern "C" {
    pub fn ImPlot_FillRange_Vector_U64_Ptr(
        buffer: *mut ImVector_ImU64,
        n: ::std::os::raw::c_int,
        vmin: ImU64,
        vmax: ImU64,
    );
}
extern "C" {
    pub fn ImPlot_CalculateBins_FloatPtr(
        values: *const f32,
        count: ::std::os::raw::c_int,
        meth: ImPlotBin,
        range: ImPlotRange,
        bins_out: *mut ::std::os::raw::c_int,
        width_out: *mut f64,
    );
}
extern "C" {
    pub fn ImPlot_CalculateBins_doublePtr(
        values: *const f64,
        count: ::std::os::raw::c_int,
        meth: ImPlotBin,
        range: ImPlotRange,
        bins_out: *mut ::std::os::raw::c_int,
        width_out: *mut f64,
    );
}
extern "C" {
    pub fn ImPlot_CalculateBins_S8Ptr(
        values: *const ImS8,
        count: ::std::os::raw::c_int,
        meth: ImPlotBin,
        range: ImPlotRange,
        bins_out: *mut ::std::os::raw::c_int,
        width_out: *mut f64,
    );
}
extern "C" {
    pub fn ImPlot_CalculateBins_U8Ptr(
        values: *const ImU8,
        count: ::std::os::raw::c_int,
        meth: ImPlotBin,
        range: ImPlotRange,
        bins_out: *mut ::std::os::raw::c_int,
        width_out: *mut f64,
    );
}
extern "C" {
    pub fn ImPlot_CalculateBins_S16Ptr(
        values: *const ImS16,
        count: ::std::os::raw::c_int,
        meth: ImPlotBin,
        range: ImPlotRange,
        bins_out: *mut ::std::os::raw::c_int,
        width_out: *mut f64,
    );
}
extern "C" {
    pub fn ImPlot_CalculateBins_U16Ptr(
        values: *const ImU16,
        count: ::std::os::raw::c_int,
        meth: ImPlotBin,
        range: ImPlotRange,
        bins_out: *mut ::std::os::raw::c_int,
        width_out: *mut f64,
    );
}
extern "C" {
    pub fn ImPlot_CalculateBins_S32Ptr(
        values: *const ImS32,
        count: ::std::os::raw::c_int,
        meth: ImPlotBin,
        range: ImPlotRange,
        bins_out: *mut ::std::os::raw::c_int,
        width_out: *mut f64,
    );
}
extern "C" {
    pub fn ImPlot_CalculateBins_U32Ptr(
        values: *const ImU32,
        count: ::std::os::raw::c_int,
        meth: ImPlotBin,
        range: ImPlotRange,
        bins_out: *mut ::std::os::raw::c_int,
        width_out: *mut f64,
    );
}
extern "C" {
    pub fn ImPlot_CalculateBins_S64Ptr(
        values: *const ImS64,
        count: ::std::os::raw::c_int,
        meth: ImPlotBin,
        range: ImPlotRange,
        bins_out: *mut ::std::os::raw::c_int,
        width_out: *mut f64,
    );
}
extern "C" {
    pub fn ImPlot_CalculateBins_U64Ptr(
        values: *const ImU64,
        count: ::std::os::raw::c_int,
        meth: ImPlotBin,
        range: ImPlotRange,
        bins_out: *mut ::std::os::raw::c_int,
        width_out: *mut f64,
    );
}
extern "C" {
    pub fn ImPlot_IsLeapYear(year: ::std::os::raw::c_int) -> bool;
}
extern "C" {
    pub fn ImPlot_GetDaysInMonth(
        year: ::std::os::raw::c_int,
        month: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImPlot_MkGmtTime(pOut: *mut ImPlotTime, ptm: *mut tm);
}
extern "C" {
    pub fn ImPlot_GetGmtTime(t: ImPlotTime, ptm: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn ImPlot_MkLocTime(pOut: *mut ImPlotTime, ptm: *mut tm);
}
extern "C" {
    pub fn ImPlot_GetLocTime(t: ImPlotTime, ptm: *mut tm) -> *mut tm;
}
extern "C" {
    pub fn ImPlot_MakeTime(
        pOut: *mut ImPlotTime,
        year: ::std::os::raw::c_int,
        month: ::std::os::raw::c_int,
        day: ::std::os::raw::c_int,
        hour: ::std::os::raw::c_int,
        min: ::std::os::raw::c_int,
        sec: ::std::os::raw::c_int,
        us: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_GetYear(t: ImPlotTime) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImPlot_AddTime(
        pOut: *mut ImPlotTime,
        t: ImPlotTime,
        unit: ImPlotTimeUnit,
        count: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ImPlot_FloorTime(pOut: *mut ImPlotTime, t: ImPlotTime, unit: ImPlotTimeUnit);
}
extern "C" {
    pub fn ImPlot_CeilTime(pOut: *mut ImPlotTime, t: ImPlotTime, unit: ImPlotTimeUnit);
}
extern "C" {
    pub fn ImPlot_RoundTime(pOut: *mut ImPlotTime, t: ImPlotTime, unit: ImPlotTimeUnit);
}
extern "C" {
    pub fn ImPlot_CombineDateTime(
        pOut: *mut ImPlotTime,
        date_part: ImPlotTime,
        time_part: ImPlotTime,
    );
}
extern "C" {
    pub fn ImPlot_FormatTime(
        t: ImPlotTime,
        buffer: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        fmt: ImPlotTimeFmt,
        use_24_hr_clk: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImPlot_FormatDate(
        t: ImPlotTime,
        buffer: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        fmt: ImPlotDateFmt,
        use_iso_8601: bool,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImPlot_FormatDateTime(
        t: ImPlotTime,
        buffer: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        fmt: ImPlotDateTimeSpec,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImPlot_ShowDatePicker(
        id: *const ::std::os::raw::c_char,
        level: *mut ::std::os::raw::c_int,
        t: *mut ImPlotTime,
        t1: *const ImPlotTime,
        t2: *const ImPlotTime,
    ) -> bool;
}
extern "C" {
    pub fn ImPlot_ShowTimePicker(id: *const ::std::os::raw::c_char, t: *mut ImPlotTime) -> bool;
}
extern "C" {
    pub fn ImPlot_TransformForward_Log10(v: f64, noname1: *mut ::std::os::raw::c_void) -> f64;
}
extern "C" {
    pub fn ImPlot_TransformInverse_Log10(v: f64, noname1: *mut ::std::os::raw::c_void) -> f64;
}
extern "C" {
    pub fn ImPlot_TransformForward_SymLog(v: f64, noname1: *mut ::std::os::raw::c_void) -> f64;
}
extern "C" {
    pub fn ImPlot_TransformInverse_SymLog(v: f64, noname1: *mut ::std::os::raw::c_void) -> f64;
}
extern "C" {
    pub fn ImPlot_TransformForward_Logit(v: f64, noname1: *mut ::std::os::raw::c_void) -> f64;
}
extern "C" {
    pub fn ImPlot_TransformInverse_Logit(v: f64, noname1: *mut ::std::os::raw::c_void) -> f64;
}
extern "C" {
    pub fn ImPlot_Formatter_Default(
        value: f64,
        buff: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImPlot_Formatter_Logit(
        value: f64,
        buff: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        noname1: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImPlot_Formatter_Time(
        noname1: f64,
        buff: *mut ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
        data: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ImPlot_Locator_Default(
        ticker: *mut ImPlotTicker,
        range: ImPlotRange,
        pixels: f32,
        vertical: bool,
        formatter: ImPlotFormatter,
        formatter_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn ImPlot_Locator_Time(
        ticker: *mut ImPlotTicker,
        range: ImPlotRange,
        pixels: f32,
        vertical: bool,
        formatter: ImPlotFormatter,
        formatter_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn ImPlot_Locator_Log10(
        ticker: *mut ImPlotTicker,
        range: ImPlotRange,
        pixels: f32,
        vertical: bool,
        formatter: ImPlotFormatter,
        formatter_data: *mut ::std::os::raw::c_void,
    );
}
extern "C" {
    pub fn ImPlot_Locator_SymLog(
        ticker: *mut ImPlotTicker,
        range: ImPlotRange,
        pixels: f32,
        vertical: bool,
        formatter: ImPlotFormatter,
        formatter_data: *mut ::std::os::raw::c_void,
    );
}
